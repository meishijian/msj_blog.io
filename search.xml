<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试题 -- Vue Vuex</title>
      <link href="/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20Vuex/"/>
      <url>/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20Vuex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题1、Vuex-是干什么用的？为什么要使用？"><a href="#题1、Vuex-是干什么用的？为什么要使用？" class="headerlink" title="题1、Vuex 是干什么用的？为什么要使用？"></a>题1、Vuex 是干什么用的？为什么要使用？</h2><p>答：Vuex <code>状态管理器</code> 。</p><p><code>集中管理</code> 组件的状态数据，可以组件之间状态数据的 <code>共享</code> 。</p><p>有些功能需要在多个组件之间传递数据，组件之间传递数据需要使用 <code>属性</code> 、 <code>事件</code> 等方法，</p><p>但如果组件之间关系复杂传递起来需要 <code>一层一层传</code> 非常麻烦 ，而把数据直接 <code>保存</code> 到 Vuex 中，就可以直接在 <code>多个组件</code> 中直接使用， <code>非常方便</code> ！。</p><p>总结：</p><p>1、简单层级的传递：父向子（ <code>属性</code> ）、子向父（ <code>事件</code> ）传值<br>2、项目复杂时， <code>层级多</code> 了： Vuex，比如：项目中登录之后的用户信息，会被所有其他组件使用，这种需要 <code>经常使用的数据</code> 应该放到 Vuex 中。</p><h2 id="题2、Vuex-中由几部分组成？分别是干什么用的？"><a href="#题2、Vuex-中由几部分组成？分别是干什么用的？" class="headerlink" title="题2、Vuex 中由几部分组成？分别是干什么用的？"></a>题2、Vuex 中由几部分组成？分别是干什么用的？</h2><p>答：四部分组件：<br>1、 <code>state</code> ：定义数据<br>2、 <code>mutations</code> ：定义操作数据的方法，简单的操作，不能是异步的<br>3、 <code>actions</code> ：定义操作数据的复杂的方法，比如AJAX等异步代码<br>4、 <code>getters</code> ：先处理state中的数据，然后返回处理之后的结果，有点类似过滤器<br>代码演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    age: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 state</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">// 修改 name</span></span><br><span class="line">    SET_NAME(state, data) &#123;</span><br><span class="line">        state.name = data</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 修改 age</span></span><br><span class="line">    SET_AGE(state, data) &#123;</span><br><span class="line">        state.age = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂业务逻辑的功能</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    login(context, data) &#123;</span><br><span class="line">        <span class="comment">// 登录代码</span></span><br><span class="line">        <span class="comment">// 注意！！：不能直接修改 state ，只能通过 mutations 中的</span></span><br><span class="line">        <span class="comment">// 方法修改，比如：</span></span><br><span class="line">        <span class="comment">// 调用 SET_NAME 方法，jack 做 为参数</span></span><br><span class="line">        context.commit(<span class="string">&#x27;SET_NAME&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理一个数据然后返回处理之后的结果（类似于过滤器）</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 处理一下年龄</span></span><br><span class="line">    getName(state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.age + <span class="string">&#x27;岁&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题3、如何在组件中使用-Vuex-中的数据？"><a href="#题3、如何在组件中使用-Vuex-中的数据？" class="headerlink" title="题3、如何在组件中使用 Vuex 中的数据？"></a>题3、如何在组件中使用 Vuex 中的数据？</h2><p>答：组件中使用 Vuex 中的数据有两种方式：</p><p>方式一、直接读取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; $store.state.name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">this</span>.$store.state.name )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">this</span>.$store.state.age )</span><br></pre></td></tr></table></figure><p>方式二、引入并映射到计算属性中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入 mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 2. 在 computed 中进行映射</span></span><br><span class="line">computed: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 Vuex 中的 name 和 age 映射到当前组件中来</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 映射完之后，就相当于本组件中的数据，可以直接使用</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">this</span>.name )</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 题4、组件中如何修改 Vuex 中的数据？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">答：调用 `</span>mutations<span class="string">` 或者 `</span>actions<span class="string">` 中的方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">方式一、直接调用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JS</span><br><span class="line"><span class="comment">// 调用  mutations 中的 SET_NAME 方法</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;SET_NAME&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 actions 中的 login 方法</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure><p>方式二、引入并映射到 methods 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入映射函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 2. 映射</span></span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">    ...mapActions([<span class="string">&#x27;login&#x27;</span>]),</span><br><span class="line">    ...mapMutations([<span class="string">&#x27;SET_NAME&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 映射完之后可以像本组件中的方法一样正常使用</span></span><br><span class="line"><span class="built_in">this</span>. SET_NAME(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.login(<span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- Vue Axios</title>
      <link href="/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20Axios/"/>
      <url>/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20Axios/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题1、如何配置基地址？为什么要配置？"><a href="#题1、如何配置基地址？为什么要配置？" class="headerlink" title="题1、如何配置基地址？为什么要配置？"></a>题1、如何配置基地址？为什么要配置？</h2><p>答：<br>写法一、 <code>axios.defaults.baseURL = &#39;http://xxxxx&#39;</code><br>写法二、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">&#x27;http://xxxxx&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每次调用接口时都需要写上 <code>完整的接口地址</code> ，但是每个接口前面的地址是相同的，</p><p>所以我们可以把接口地址中前面 <code>相同的部分</code> 提取出来设置一下，这样在后面调用接口时就 <code>不需要写前面的地址</code> 了。</p><p>每个接口地址前面相同的部分就是 <code>基地址</code> 。</p><h2 id="题2、axios-中有几个拦截器？项目中是怎么使用的？"><a href="#题2、axios-中有几个拦截器？项目中是怎么使用的？" class="headerlink" title="题2、axios 中有几个拦截器？项目中是怎么使用的？"></a>题2、axios 中有几个拦截器？项目中是怎么使用的？</h2><p>答：两个拦截器：<br><code>前置（请求）拦截器</code> ：就是一个函数，在 <code>每次调用接口之前</code> 都会触发的函数。<br><code>后置（响应）拦截器</code> ：就是一个函数，每次服务器 <code>返回结果之后</code> 触发的函数。</p><p><code>前置拦截器</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册时有两个函数，</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次请求成功时执行</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次请求如果失败时执行</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后置拦截器 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册时有两个函数，</span></span><br><span class="line">request.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每次请求成功时执行</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每次请求如果失败时执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于这 <code>两个函数</code> 的特点：<br>前置拦截器（为每次请求 <code>添加令牌</code> ）：</p><pre><code>1、请求接口时要把令牌放到协议头上提交给接口2、每次请求接口之前都放令牌比较麻烦3、所以，可以在前置拦截器中只写一次代码，就可以在每次请求时把令牌放上</code></pre><p>后置拦截器（判断每次请求 <code>是否失败</code> ）：</p><pre><code>1、每次调用完接口之后都要判断是否失败，如果失败就提交错误信息2、我们可以在后置拦截器中写一次代码，判断如果返回错误就提示错误信息3、这样之后，以后在项目中就不用再判断接口是否失败了</code></pre><h2 id="题3、如何并发执行多个-AJAX-请求？为什么要并发？"><a href="#题3、如何并发执行多个-AJAX-请求？为什么要并发？" class="headerlink" title="题3、如何并发执行多个 AJAX 请求？为什么要并发？"></a>题3、如何并发执行多个 AJAX 请求？为什么要并发？</h2><p>答：<br>使用 <code>Promise.all</code> 来执行多个异步代码，在 axios 中也可以使用 <code>axios.all</code> 。</p><p>比如：两个接口时第一个执行完之后，再执行第二个，所以如果每个接口需要 <code>2</code> 秒执行完，那么调用下面两个接口一共要花费 <code>4</code> 秒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">await</span> getUsers()</span><br><span class="line">    <span class="keyword">let</span> articles = <span class="keyword">await</span> getArticles()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这两个接口没有先后的关系，所以我们为了 <code>提高性能</code> 可以并发调用。<br>可以使用 <code>Promise.all</code> 让多个 <code>异步并发执行</code> 。<br>上面的代码改成下面的样子， <code>两个代码同时执行</code> ，最终只需要 <code>2</code> 秒就可以完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 同时执行两个异步代码</span></span><br><span class="line">    <span class="keyword">const</span> [users, articles] = <span class="built_in">Promise</span>.all(getUsers(), getArticles())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题4、在-Vue-中使用-axios-的流程？"><a href="#题4、在-Vue-中使用-axios-的流程？" class="headerlink" title="题4、在 Vue 中使用 axios 的流程？"></a>题4、在 Vue 中使用 axios 的流程？</h2><p>答：</p><p>1、 <code>安装</code> axios<br>2、在 <code>main.js</code> 中引入 <code>axios</code><br>3、 <code>配置</code> axios （基地址、拦截器）<br>4、把 axios <code>注册到</code> Vue 的原型上（ <code>Vue.prototype.$axios = axios</code> ）<br>5、注册到原型上之后，就可以直接在任何一个组件中使用 <code>this.$axios</code> 来获取 axios 并使用了。</p><p>扩展：如果没注册到原型上，那么在每个组件中如果要使用需要先引入再使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(...）</span><br></pre></td></tr></table></figure><h2 id="题5、axios-中如何设置请求-HTTP-协议头信息？"><a href="#题5、axios-中如何设置请求-HTTP-协议头信息？" class="headerlink" title="题5、axios 中如何设置请求 HTTP 协议头信息？"></a>题5、axios 中如何设置请求 HTTP 协议头信息？</h2><p>答：<br>我们向服务器提交数据时有三个地方：<br>1、 <code>URL</code> 上（小的数据，id、页码、搜索关键字等），比如：/users?page=1&amp;id=122<br>2、 <code>body </code> 中（POST方式提交的数据），比如：用户名、密码、图片、JSON等。<br>3、 <code>http 协议头</code> 上，比如：token 令牌、CORS（AJAX跨域）、接口限频（案例）、HTTP缓存等。<br>图示位置：<br><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/01.png"><br>在 axios 中的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. URL 上提交</span></span><br><span class="line">写法一、 写在 ?</span><br><span class="line">    axios.get(<span class="string">&#x27;/users?id=1&amp;page=1&#x27;</span>)</span><br><span class="line">写法二、</span><br><span class="line">axios.get(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 在 body 中提交（POST、PUT方式）</span></span><br><span class="line">axios.post(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">    username: <span class="number">111</span>,</span><br><span class="line">    password: <span class="number">123</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 在协议头上放</span></span><br><span class="line">写法一、 每次发送请求时单独设置</span><br><span class="line">axios.post(<span class="string">&#x27;/users&#x27;</span>, &#123;&#125;, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">        Content - Type: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        Authorization: <span class="string">&#x27;Beaer xxxxxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">写法二、 为所有请求设置公共的</span><br><span class="line">axios.defaults.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="扩展：什么是-HTTP-协议？"><a href="#扩展：什么是-HTTP-协议？" class="headerlink" title="扩展：什么是 HTTP 协议？"></a>扩展：什么是 HTTP 协议？</h2><p>答： <code>浏览器</code> 和 <code>服务器</code> 通信时的一种 <code>规定好结构的字符串</code> 。<br>图示位置：<br><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue/02.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- Vue 路由</title>
      <link href="/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20%E8%B7%AF%E7%94%B1/"/>
      <url>/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题1、vue-router-中主要提供了几个组件？分别是干什么用的？"><a href="#题1、vue-router-中主要提供了几个组件？分别是干什么用的？" class="headerlink" title="题1、vue router 中主要提供了几个组件？分别是干什么用的？"></a>题1、vue router 中主要提供了几个组件？分别是干什么用的？</h2><p>答：<br>两个组件。<br><code>router-link</code> ：制作一个路由跳转的按钮，比如：登录<br><code>router-view</code> ：显示注册的路由页面</p><h2 id="题2、keep-alive-是干什么用的？怎么用？"><a href="#题2、keep-alive-是干什么用的？怎么用？" class="headerlink" title="题2、keep-alive 是干什么用的？怎么用？"></a>题2、keep-alive 是干什么用的？怎么用？</h2><p>答：<br>一个路由在切换时会 <code>被销毁</code> ，之前的 <code>数据全部丢失</code> ，下次再访问这个组件时，需要重新创建，重新调接口，重新渲染.<br>我们可以使用 <code>keep-alive</code> 把组件缓存起来，这样在组件 <code>切换</code> 时，这个组件并 <code>没有被销毁</code> ，下次访问时，可以就可以显示出来，而且 <code>原组件中数据</code> 还在。</p><p>把需要缓存的组件使用 <code>keep-alive</code> 套起来即可。比如：把所有 <code>路由页面都缓存起来</code> ，在切换时不销毁：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">还可以使用 include 和 exclude 来设置哪些缓存，哪些不缓存，比如：不缓存登录页：</span><br><span class="line">``` HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文档地址：<a href="https://cn.vuejs.org/v2/api/#keep-alive">https://cn.vuejs.org/v2/api/#keep-alive</a></p><h2 id="题3、如何实现路由跳转？"><a href="#题3、如何实现路由跳转？" class="headerlink" title="题3、如何实现路由跳转？"></a>题3、如何实现路由跳转？</h2><p>答：<br>方式一、 <code>router-link</code> 制作按钮<br>方式二、 <code>JS 中使用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;路径&#x27;</span>) <span class="comment">// 跳转到指定路径</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">// 返回上一个页面</span></span><br><span class="line"><span class="built_in">this</span>.$router.go(<span class="number">-1</span>) <span class="comment">// 返回 上一个页面</span></span><br></pre></td></tr></table></figure><h2 id="题4、如何接收路由参数？"><a href="#题4、如何接收路由参数？" class="headerlink" title="题4、如何接收路由参数？"></a>题4、如何接收路由参数？</h2><p>答：路由参数有两种形式：<br>形式一、<br><code>?</code> 后面，比如 <code>/users?id=100&amp;page=1</code><br>JS中使用 <code>this.$route.query.id</code><br>形式二、<br><code>/</code> 后面，比如： <code>users/100/1</code><br>JS 中使用 <code>this.$route.params.id</code></p><h2 id="题5、配置一个路由需要几个属性？"><a href="#题5、配置一个路由需要几个属性？" class="headerlink" title="题5、配置一个路由需要几个属性？"></a>题5、配置一个路由需要几个属性？</h2><p>答：至少2个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path： 路径</span><br><span class="line">component： 页面组件</span><br><span class="line">name: 路由名称</span><br><span class="line">children： 子路由页面</span><br><span class="line">meta： 设置其他的信息</span><br></pre></td></tr></table></figure><h2 id="题6、vue-router-中有几个钩子函数（导航守卫）？项目中一般用来干什么用？"><a href="#题6、vue-router-中有几个钩子函数（导航守卫）？项目中一般用来干什么用？" class="headerlink" title="题6、vue router 中有几个钩子函数（导航守卫）？项目中一般用来干什么用？"></a>题6、vue router 中有几个钩子函数（导航守卫）？项目中一般用来干什么用？</h2><p>答：</p><p><code>导航守卫</code> ：一个 <code>回调函数</code> ，这个函数会在每次路由跳转时执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach： 在每次路由跳转之前执行。</span><br><span class="line">afterEach： 在每次路由跳转完之后执行。</span><br><span class="line">beforeEnter： 写在某一个路由中， 当进入这个路由时触发的。</span><br></pre></td></tr></table></figure><p><code>组件内守卫</code> ：写在组件中的路由，当进入这个组件时才触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter： 当前进入前</span><br><span class="line">beforeRouteUpdate(<span class="number">2.2</span> 新增)： 路由更新时</span><br><span class="line">beforeRouteLeave： 离开这个组件时</span><br></pre></td></tr></table></figure><p><code>beforeResolve</code> ：所有组件解析完，跳转前执行。</p><p>基于它的特点， <code>beforeEach</code> 中非常适合 <code>编写权限功能</code> ，比如：必须登录才能进入我的订单页面。可以在每次跳转之前执行 <code>beforeEach</code> 然后在 beforeEach 中判断，如果要进入 <code>订单页面必须要先登录</code> 。</p><p>商城后台项目中使用它来进行权限判断！</p><h2 id="题7、vue-router-中的-beforeEach-钩子函数（导航守卫）中有几个参数？分别是干什么用的？"><a href="#题7、vue-router-中的-beforeEach-钩子函数（导航守卫）中有几个参数？分别是干什么用的？" class="headerlink" title="题7、vue router 中的 beforeEach 钩子函数（导航守卫）中有几个参数？分别是干什么用的？"></a>题7、vue router 中的 beforeEach 钩子函数（导航守卫）中有几个参数？分别是干什么用的？</h2><p>答：三个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">to： 对象， 将要跳转到的路由对象。</span><br><span class="line"><span class="keyword">from</span>： 对象， 跳转前的路由对象。</span><br><span class="line">next： 函数， 用来跳转的函数， 在钩子函数中必须要调用这个函数， 有三种情况：</span><br><span class="line">next()： 进入下一个页面。</span><br><span class="line">next(<span class="literal">false</span>)： 阻止本次跳转（ 不跳转）。</span><br><span class="line">next(路径）： 跳转到这个指定的路径。</span><br></pre></td></tr></table></figure><p>示例、比如必须登录才能进入 <code>/main</code> 页面，如果 <code>没有登录</code> 就跳转到登录页面。</p><p> <code>router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个全局守卫，在每次跳转之前执行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否要去 /main 页面</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;main&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断有没有令牌</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>) === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 跳转到登录页</span></span><br><span class="line">            next(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接跳转过去</span></span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="题8、如何在一个页面中配置子路由页面？"><a href="#题8、如何在一个页面中配置子路由页面？" class="headerlink" title="题8、如何在一个页面中配置子路由页面？"></a>题8、如何在一个页面中配置子路由页面？</h2><p>答：</p><p>第一步：在 <code>router/index.js</code> 中使用 <code>children</code> 属性配置子路由页面</p><p>第二步：在这个页面中添加 <code>router-view</code> 组件显示子页面</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> vue 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- Vue 基础</title>
      <link href="/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20%E5%9F%BA%E7%A1%80/"/>
      <url>/msj_blog.io/2020/09/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题1、data-中定义的数据如何在页面中显示？"><a href="#题1、data-中定义的数据如何在页面中显示？" class="headerlink" title="题1、data 中定义的数据如何在页面中显示？"></a>题1、data 中定义的数据如何在页面中显示？</h2><p>答：</p><pre><code>1、如果是字符串、数字等，使用插值表达式 &#123;&#123;...&#125;&#125;2、如果是数组一般使用 v-for </code></pre><h2 id="题2、生命周期函数有哪些？项目中是怎么使用的？"><a href="#题2、生命周期函数有哪些？项目中是怎么使用的？" class="headerlink" title="题2、生命周期函数有哪些？项目中是怎么使用的？"></a>题2、生命周期函数有哪些？项目中是怎么使用的？</h2><p>答：</p><pre><code>1、创建前后、挂载前后、销毁前后、更新前后、被激活、被隐藏等2、项目中常用的：    created（创建后）：调接口获取页面初始数据。    mounted（挂载后）：在页面加载完之后执行一个 DOM 操作的 JS 代码，比如：商城后中的图表功能。</code></pre><h2 id="题3、在-Vue-中如何绑定事件？"><a href="#题3、在-Vue-中如何绑定事件？" class="headerlink" title="题3、在 Vue 中如何绑定事件？"></a>题3、在 Vue 中如何绑定事件？</h2><p>答：</p><pre><code>v-on 或者 @ 。比如：v-on:click 或者 @click。</code></pre><h2 id="题4、什么是双向绑定？项目中是怎么使用的？"><a href="#题4、什么是双向绑定？项目中是怎么使用的？" class="headerlink" title="题4、什么是双向绑定？项目中是怎么使用的？"></a>题4、什么是双向绑定？项目中是怎么使用的？</h2><p>答：</p><pre><code>使用 v-model 指令进行双向绑定。项目中：操作表单元素：单选框、复选框、下拉框等时需要定义数据并使用 v-model 进行绑定。</code></pre><h2 id="题5、Vue-组件中的-data-为什么是函数？"><a href="#题5、Vue-组件中的-data-为什么是函数？" class="headerlink" title="题5、Vue 组件中的 data 为什么是函数？"></a>题5、Vue 组件中的 data 为什么是函数？</h2><p>答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">跟按引用传值有关。</span><br><span class="line">如果不用函数，data 是对象类型的数据，对象都是按引用传递的，会导致：当组件使用多次时，它们会共享用同一个 data 数据，</span><br><span class="line">修改任何一个组件中的 data , 其他的组件也会跟着一起改变，这是不对的，</span><br><span class="line">每个组件实例在使用时应该是完全独立 的，互不影响才对。</span><br><span class="line">所以 data 必须是一个函数，每次在函数中返回一个全新的对象，这样就不会出现共享的问题了。</span><br></pre></td></tr></table></figure><h2 id="扩展：什么是按引用传值？"><a href="#扩展：什么是按引用传值？" class="headerlink" title="扩展：什么是按引用传值？"></a>扩展：什么是按引用传值？</h2><p>变量赋值时分为两种情况：</p><p><code>按值传递</code> ：如果是数字、布尔、字符串等基础类型。<br><code>原理</code> ：先把这个值在内存中复制一份，然后赋给另一个变量。<br><code>效果</code> ：赋值之后两个值是两个独立的变量互不影响 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 按值传递 */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span> <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> b = a    <span class="comment">// 按值传递（因为 a 是数字）</span></span><br><span class="line"><span class="comment">// 现在 a 和 b 是两个独立 互不影响 的变量</span></span><br><span class="line">b=<span class="number">200</span>   <span class="comment">// 修改 b 不影响 a </span></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// a 还是 100</span></span><br></pre></td></tr></table></figure><p><code>按引用传递</code> ：如果值类型是对象或者数组时。<br><code>原理</code> ：把这个变量在内存中的地址赋给另一个变量。<br><code>效果</code> ：赋值之后，两个变量指向同一个内存地址，其实还是同一个变量，只不过有两个变量名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 按引用传递 */</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> b = a <span class="comment">// 按引用传递（数组和对象都是引用传递）</span></span><br><span class="line"><span class="comment">// a 和 b 指向内存中的同一个地址，a和b是同一个数据</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">// 把 b 修改</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]) <span class="comment">// 100 也变成100，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以如果希望复制出一个全新的数组，需要使用 “克隆技术”</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    浅克隆：只克隆最外层的数据。（只克隆一部分）</span></span><br><span class="line"><span class="comment">            方法：let b = [...a]    ， 把 a 克隆一份给 b （浅克隆）</span></span><br><span class="line"><span class="comment">    深克隆：把内层的也复制一份。（完全的克隆）</span></span><br><span class="line"><span class="comment">            方法：let b = JSON.parse(   JSON.stringify(a)  )</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题6、如何定义计算属性？项目中是怎么使用的？"><a href="#题6、如何定义计算属性？项目中是怎么使用的？" class="headerlink" title="题6、如何定义计算属性？项目中是怎么使用的？"></a>题6、如何定义计算属性？项目中是怎么使用的？</h2><p>答：</p><pre><code>使用 computed 来定义计算属性。制作购物车时里面的商品总价。</code></pre><h2 id="题7、什么是监听器？监听什么的？项目中是怎么使用的？"><a href="#题7、什么是监听器？监听什么的？项目中是怎么使用的？" class="headerlink" title="题7、什么是监听器？监听什么的？项目中是怎么使用的？"></a>题7、什么是监听器？监听什么的？项目中是怎么使用的？</h2><p>答：</p><p>   使用 <code>watch</code> 来定义监听器，一个监听器就是一个函数，函数名就是要监听的 <code>data</code> 中的一个变量的名字，一旦监听的变量发生变量，这个函数就被调用了。</p><p>   监听器分为 <code>浅监听</code> 和 <code>深度监听</code> ，当监听的数据是一个复杂的数据类型（数组、对象）时需要使用 <code>深度监听</code> 。</p><p>   在项目中实现数据 <code>搜索</code> 、 <code>排序</code> 、 <code>翻页</code> 时使用过，每当用户点击 <code>翻页</code> 、 <code>排序</code> 、 <code>搜索条件</code> 的按钮时就要重新调用接口，所以我定义了一个 <code>变量</code> ，保存翻页、排序、搜索的信息，然后使用监听器监听这个变量，一量发生变化就重新调用接口获取数据</p><p>   代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 保存翻页、搜索关键字、排序信息</span></span><br><span class="line">            info: &#123;</span><br><span class="line">                page: <span class="number">1</span>,</span><br><span class="line">                keywords: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                sortby: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                sortway: <span class="string">&#x27;desc&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听器</span></span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="comment">// 当条件改变时重新调用接口</span></span><br><span class="line">        info: &#123;</span><br><span class="line">            deep: <span class="literal">true</span>, <span class="comment">// 深度监听</span></span><br><span class="line">            handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 重新调用接口获取数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？"><a href="#题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？" class="headerlink" title="题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？"></a>题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？</h2><p>答：</p><p>   使用 <code>filter</code> 定义过滤器。</p><p>   过滤器分为 <code>全局过滤器</code> 和 <code>局部过滤器</code> 。</p><p><code>全局过滤器</code> ：在任何一个组件中可以直接使用。<br><code>局部过滤器</code> ：在组件中需要先引入，再注册到组件的 <code>filter</code> 中，然后才能使用。</p><p>   当一个绝对时间（发表文章时间）在显示时转化成一个相对时间，项目中的实现思路：</p><pre><code>1、先定义了一个叫做 relativeTime 的全局变量器2、在组件中使用： &#123;&#123; time | relativeTime &#125;&#125;</code></pre><h2 id="题9、什么是混入？项目中是怎么使用的？"><a href="#题9、什么是混入？项目中是怎么使用的？" class="headerlink" title="题9、什么是混入？项目中是怎么使用的？"></a>题9、什么是混入？项目中是怎么使用的？</h2><p>答：</p><p><code>mixins</code> 是 <code>定义混入</code> 。可以把一段 JS 代码合并到一个 Vue 组件中。<br><code>用途</code> ：可以把多个组件共用的 <code>JS 代码单独提取出来</code> 放到一个 JS 文件中，然后哪个组件中需要就直接混入。</p><p>之前写的商城后台的项目：使用了混入实现的把组件中的 <code>JS 代码</code> 和 <code>HTML+CSS</code> 分离写在两个文件中。</p><p><code>实现思路</code> ：</p><pre><code>1、把 JS 代码单独写到一个 JS 文件中2、在 .vue 文件中使用 mixins: [ js 文件] 混入进来</code></pre><h2 id="题10、如何将-data-中定义的图片路径绑定到-src-属性上？"><a href="#题10、如何将-data-中定义的图片路径绑定到-src-属性上？" class="headerlink" title="题10、如何将 data 中定义的图片路径绑定到 src 属性上？"></a>题10、如何将 data 中定义的图片路径绑定到 src 属性上？</h2><p>答：</p><p>使用 <code>v-bind</code> 或者 <code>:</code><br>比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">img:</span> <span class="attr">src</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">img</span> <span class="attr">v</span> <span class="attr">-</span> <span class="attr">bind:</span> <span class="attr">src</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">image: &#x27;http://www.ww.ww/1.jpg&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题11、在-Vue-中使用一个自定义组件的流程是？"><a href="#题11、在-Vue-中使用一个自定义组件的流程是？" class="headerlink" title="题11、在 Vue 中使用一个自定义组件的流程是？"></a>题11、在 Vue 中使用一个自定义组件的流程是？</h2><p>答：<br>自定义组件有两种情况：</p><p><code>全局组件</code> ：直接在页面中使用 ，比如：<br><code>局部组件</code> ：先引入、再组件，然后才能使用。</p><p>创建一个自定义组件，比如：Hello.vue 组件</p><p>1、使用 import 引入这个 <code>自定义组件</code> ，比如： <code>import Hello from &#39;Hello.vue&#39;</code><br>2、注册这个组件，在 Vue 的 <code>components: &#123; Hello &#125;</code><br>3、使用</p><h2 id="题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？"><a href="#题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？" class="headerlink" title="题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？"></a>题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？</h2><p>答：</p><p><code>父&gt;子</code> 使用属性 ，注意，需要在子组件中使用 <code>props</code> 来接收属性。<br><code>子&gt;父</code> 使用 事件，注意：在子组件中使用 <code>this.$emit(事件名，数据）</code> 触发父组件中的事件<br><code>兄弟之间</code> 使用 <code>Bus 总线</code> 的中间组件实现。</p><p><strong>父向子传值时，如何设置属性的默认值和属性的类型？</strong><br>在子组件中使用 <code>props</code> 接收属性：</p><p>写法一、 <code>不设置类型和默认值</code><br>props: [ ‘name’, ‘age’ ] // 接收 name 和 age ，不限制类型</p><p>写法二、 <code>限制类型和默认值</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题13、style-上的-scoped-是什么意思？使用原理是什么？"><a href="#题13、style-上的-scoped-是什么意思？使用原理是什么？" class="headerlink" title="题13、style 上的 scoped 是什么意思？使用原理是什么？"></a>题13、style 上的 scoped 是什么意思？使用原理是什么？</h2><p>答：<br><code>里面的样式</code> 只对当前这个 <code>组件生效</code> ， <code>不会影响</code> 其他组件。</p><p>当添加了 <code>scoped</code> 之后，vue 会在这个组件中所有的标签上都添加一个 <code>唯一的标识符</code> ，</p><p>只有这个组件中的标签上才有这个 <code>标签符</code> ，然后在 CSS 上会通过这个属性来 <code>限制 CSS </code> 的应用范围。</p><p>1、组件中 <code>添加属性</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-26084dc2</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-26084dc2</span> <span class="attr">class</span>=<span class="string">&quot;login-btnBox&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">data-v-26084dc2</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、css 上通过属性来 <code>限制范围</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通过属性选择器就只对当前这个组件中的 .count 生效 */</span></span><br><span class="line"><span class="selector-class">.count</span> <span class="selector-attr">[ data-v-26084dc2]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题14、什么是插槽？干什么用的？"><a href="#题14、什么是插槽？干什么用的？" class="headerlink" title="题14、什么是插槽？干什么用的？"></a>题14、什么是插槽？干什么用的？</h2><p>答：</p><p>组件中会在 <code>特定的位置</code> 上留插槽，我们可以在使用这个组件时向这个插槽中 <code>添加HTML的结构</code> ，目的是可以自己 <code>扩展一个组件的功能</code> 。</p><p>比如：项目中使用的 <code>vant</code> 的导航栏组件，但是它 <code>默认的图标</code> 不满足要求，所以我们可以使用它的 <code>插槽</code> ，自己来 <code>定义图标</code> 这个区域的内容。</p><p>插槽分为两种：<br><code>匿名插槽（默认插槽）</code> : 一个组件中只能有一个 <code>匿名插槽</code> , 如果在组件中间 <code>不使用 slot</code> 默认放到匿名插槽的位置。</p><p><code>有名插槽</code> ：一个组件中可以有 <code>多个有名的插槽</code> , 向有名插槽中放数据时需要 <code>使用 slot</code> 属性指定插槽的名字</p><h2 id="题15、v-if-和-v-show-的区别？"><a href="#题15、v-if-和-v-show-的区别？" class="headerlink" title="题15、v-if 和 v-show 的区别？"></a>题15、v-if 和 v-show 的区别？</h2><p>答：</p><p><code>共同</code> ：v-if 和 v-show 都是控制一个元素是否显示。<br><code>区别</code> ：v-if 如果是 false 就不渲染这个元素，页面中没有这个元素<br><code>v-show</code> 无论 true 和 false 都会渲染这个元素，页面中始终有这个元素，当 false 时使用 display: none 把它隐藏。</p><h2 id="题16、v-html-的用途是？"><a href="#题16、v-html-的用途是？" class="headerlink" title="题16、v-html 的用途是？"></a>题16、v-html 的用途是？</h2><p>答：<br>把一个 HTML 字符串 <code>解析</code> 成 HTML 显示出来。<br>比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; str &#125;&#125; ------------&gt;</span><br><span class="line"><span class="comment">&lt;!-- 当成普通字符串显示出来：  &lt;h1&gt;hello&lt;/h1&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ----------&gt;</span><br><span class="line"><span class="comment">&lt;!-- 解析 h1 标签，显示出来是一个加粗放大的 hello --&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">str: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题17、template-组件的用途是？"><a href="#题17、template-组件的用途是？" class="headerlink" title="题17、template 组件的用途是？"></a>题17、template 组件的用途是？</h2><p>答：<br>这个标签在页面中 <code>不会渲染</code> 出任何元素，它的用途是把 <code>多个标签套起来</code> 当成一个 <code>整体</code> 。</p><p>比如有三个 div 标签要循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>必须要使用一元素套起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;v in 10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样最外层多了一个 div，如果不想要外层 div 可以使用 tempalte</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;v in 10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- JavaScript</title>
      <link href="/msj_blog.io/2020/09/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/"/>
      <url>/msj_blog.io/2020/09/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题1、-ES6的新特性"><a href="#题1、-ES6的新特性" class="headerlink" title="题1、 ES6的新特性"></a>题1、 ES6的新特性</h2><p>1、 <code>变量常量</code> ：let 、const<br>2、 <code>异步</code> ：promise 、 async… await<br>3、 <code>面向对象</code> ：class<br>4、 <code>数据类型</code> ：map、set、Symbol<br>5、 <code>函数</code> ：箭头函数<br>6、 <code>其他</code> ：展开运算符 ： …<br>7、 <code>对象解析运算符</code> ：{}:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boy = &#123;</span><br><span class="line">    name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    age: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name</span><br><span class="line">&#125; = boy</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// tom</span></span><br></pre></td></tr></table></figure><p>8、 <code>数组加强</code> ：includes 等等<br>9、 <code>字符串加强</code> ：startWith 等等</p><pre><code>9.1 proxy（代理）9.2 Reflect9.3 模块化</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.js</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    name</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure><h2 id="题2、JS中如何判断当前使用的是什么浏览器？"><a href="#题2、JS中如何判断当前使用的是什么浏览器？" class="headerlink" title="题2、JS中如何判断当前使用的是什么浏览器？"></a>题2、JS中如何判断当前使用的是什么浏览器？</h2><p>使用 js 的内置对象 <code>navigator</code> 中的 <code>userAgent</code> 属性来判断，不同的浏览器打印出来的 <code>字符串值不同</code> ，我们只需要从字符串中来匹配：</p><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBrowser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">    <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">&quot;Opera&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Opera浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">&quot;compatible&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">        userAgent.indexOf(<span class="string">&quot;MSIE&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp; !isOpera; <span class="comment">//判断是否IE浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">&quot;Edge&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否IE的Edge浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isFF = userAgent.indexOf(<span class="string">&quot;Firefox&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Firefox浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isSafari = userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">        userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>) == <span class="number">-1</span>; <span class="comment">//判断是否Safari浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isChrome = userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">        userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断Chrome浏览器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;MSIE (\\d+\\.\\d+);&quot;</span>);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">&quot;$1&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE7&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE8&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE9&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE10&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">11</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE11&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125; <span class="comment">//IE版本过低</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isOpera) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Opera&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEdge) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Edge&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFF) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FF&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSafari) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Safari&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isChrome) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chrome&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题3、什么是-JSON？"><a href="#题3、什么是-JSON？" class="headerlink" title="题3、什么是 JSON？"></a>题3、什么是 JSON？</h2><p>JSON 是一种 <code>数据结构</code> ，在客户端与服务器端进行数据通信时使用。除了 JSON 之外还有一种数据结构在传输数据时很常用，叫做 <code>XML</code> 。但是相比之下，JSON这种结构与XML更加的 <code>简洁</code> 、 <code>数据量小</code> 、 <code>高效</code> ，所以我们大部分时候在 <code>传输数据</code> 时都是使用 的 <code>JSON</code> 这种格式。</p><h2 id="题4、图片懒加载"><a href="#题4、图片懒加载" class="headerlink" title="题4、图片懒加载"></a>题4、图片懒加载</h2><p>懒加载：用到的时候再加载。通常用来 <code>优化比较长的页面</code> 。比如：京东商城中，默认只显示第一屏的图片，后面几屏的图片只有在滚动下去的时候才加载显示。</p><p><code>图片懒加载</code> 的实现原理：为了不让浏览器直接加载图片，我们可以先把图片的真实路径放到图片的一个 <code>自定义的属性</code> 上（不要放到 src 属性上），然后通过 <code>JS</code> 来判断 <code>滚动的位置</code> ，当发现图片标签滚动到浏览上时，才把图片路径移动到 src 属性上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http:/www.bad.com/1.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>参考地址：<a href="https://www.jianshu.com/p/dcf73ad5ebed">https://www.jianshu.com/p/dcf73ad5ebed</a></p><h2 id="题5、JS获取元素的几种方法"><a href="#题5、JS获取元素的几种方法" class="headerlink" title="题5、JS获取元素的几种方法"></a>题5、JS获取元素的几种方法</h2><p> <code>document.getElementById</code><br> <code>document.getELementsByTagName</code><br> <code>document.getELementsByName</code><br> <code>document.querySelector</code><br> <code>document.querySelecorAll</code><br>等等</p><h2 id="题6、如何在控制台中查看原型链"><a href="#题6、如何在控制台中查看原型链" class="headerlink" title="题6、如何在控制台中查看原型链"></a>题6、如何在控制台中查看原型链</h2><p>使用 console.log 打印对象，然后在控制台中每个对象有个 <code>__proto__</code> 属性可以查看原型。<br><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/03.png"></p><h2 id="题7、-谈谈对this的理解？-call和apply-的区别是什么，那个性能更好一些？"><a href="#题7、-谈谈对this的理解？-call和apply-的区别是什么，那个性能更好一些？" class="headerlink" title="题7、 谈谈对this的理解？ call和apply 的区别是什么，那个性能更好一些？"></a>题7、 谈谈对this的理解？ call和apply 的区别是什么，那个性能更好一些？</h2><p><strong><code>对 this 的理解</code></strong><br>在 <code>普通函数中</code> ：（this 和 <code>定义函数</code> 的位置有关）</p><pre><code>1、全局普通函数：this 指向 window 对象2、对象中的一个普通函数：this 指向这个对象3、通过 call 和 apply 两个函数可以修改 this 指向某一个对象</code></pre><p>在 <code>箭头函数</code> ：（this 和 <code>调用函数</code> 的位置有关）</p><pre><code>1、函数在哪里调用 this 就是哪里的 this2、使用 call 和 apply 不有修改箭头函数中的 this</code></pre><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面中所有的全局变量和全局函数都属于 window 对象的一个属性</span></span><br><span class="line">    <span class="comment">/* this 、箭头函数、call和apply 结合题 */</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span>;   <span class="comment">// 相当于 window.age = 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通函数中的 this 指向 window 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)   <span class="comment">// 相当于 window.age</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> boy = &#123;</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        <span class="comment">// 函数在对象中的函数，this 指向这个对象</span></span><br><span class="line">        hello1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 箭头函数中的 this 是调用这个函数时的 this</span></span><br><span class="line">        hello2: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello()       <span class="comment">//  10</span></span><br><span class="line"></span><br><span class="line">    boy.hello1()  <span class="comment">//      20  相当于 boy.age</span></span><br><span class="line">    boy.hello2()    <span class="comment">//   10 相当于 this.age</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// call 改变 hello 函数中的 this 指向 boy 对象</span></span><br><span class="line">    hello.call(boy)    <span class="comment">//  20</span></span><br><span class="line">    <span class="comment">// apply 和 call 一样可以改变 this 的指向</span></span><br><span class="line">    hello.apply(boy)   <span class="comment">//  20</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">**`</span>call 和 apply 的区别<span class="string">`**</span></span><br><span class="line"><span class="string">共同点：修改 this 的指向。比如：下面的代码修改 hello 函数中的 this 指向 boy 对象：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JS</span><br><span class="line">hello.call(boy)</span><br><span class="line">hello.apply(boy)</span><br></pre></td></tr></table></figure><p>区别： <code>后续参数不同</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">x, y</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 hello 函数，并让函数中的 this 指向 boy 对象</span></span><br><span class="line">hello.call(boy, <span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 多个参数用，隔开</span></span><br><span class="line">hello.apply(boy, [<span class="number">10</span>, <span class="number">20</span>]) <span class="comment">// 多个参数用数组</span></span><br></pre></td></tr></table></figure><p>哪一个性能更好一些：网络上有人做过测试，结果是 call 的性能更好一些!</p><p>参考：<a href="https://blog.csdn.net/zhengyinhui100/article/details/7837127/">https://blog.csdn.net/zhengyinhui100/article/details/7837127/</a></p><h2 id="题8、-javaScript的内置对象相关内容"><a href="#题8、-javaScript的内置对象相关内容" class="headerlink" title="题8、 javaScript的内置对象相关内容"></a>题8、 javaScript的内置对象相关内容</h2><p><code>Math</code> ：数据操作相关，随机数、Math.random() 等</p><p><code>Date</code> ：时间操作相关，比如获取当前时间戳：Date.now()（单位：毫秒）</p><p><code>Dom</code> 操作相关：</p><p>​ <code>Document</code> ：文档操作</p><p><code>Navigator</code> ：浏览器相关</p><p>​ <code>Location</code> ：URL相关，比如：跳转页面 Location.href=”xxx”</p><p><code>Object</code> ：对象的操作，比如，合并两个对象：Object.assign</p><p><code>String</code> ：字符串操作</p><p><code>Array</code> ：数据操作</p><p><code>Number</code> ：数据操作</p><p>等等</p><h2 id="题9、-DOM操作——怎么添加、移动、复制、创建和查找节点？"><a href="#题9、-DOM操作——怎么添加、移动、复制、创建和查找节点？" class="headerlink" title="题9、 DOM操作——怎么添加、移动、复制、创建和查找节点？"></a>题9、 DOM操作——怎么添加、移动、复制、创建和查找节点？</h2><p><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/04.png"></p><h2 id="题10、基础类型有什么？"><a href="#题10、基础类型有什么？" class="headerlink" title="题10、基础类型有什么？"></a>题10、基础类型有什么？</h2><p>JS 中的 8 种数据：</p><p><code>number</code> ：数字<br><code>string</code> ：字符串<br><code>boolean</code> ：布尔<br><code>array</code> ：数据<br><code>object</code> ：对象<br> <code>null</code><br> <code>undefiend</code><br> <code>symbol</code><br><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/05.png"></p><h2 id="题11、JS-引用类型有什么？"><a href="#题11、JS-引用类型有什么？" class="headerlink" title="题11、JS 引用类型有什么？"></a>题11、JS 引用类型有什么？</h2><p>JS 中所有的对象类型的数据都是 <code>引用</code> 类型。</p><h2 id="题12、什么是-Promise？"><a href="#题12、什么是-Promise？" class="headerlink" title="题12、什么是 Promise？"></a>题12、什么是 Promise？</h2><p>是 ES6 中新出的语法，它主要用来解决 <code>回调地狱</code> 的问题。</p><p>对于异步的代码，传统的实现方法都是使用 <code>回调函数</code> 来实现，但是回调函数 <code>嵌套太多层</code> 时会出现 <code>回调地狱</code> ， 导致代码 <code>不容易维护</code> ，为了解决这个问题，我们可以把异步的代码封装成一个 <code>promise</code> 对象，然后就可以使用 <code>.then</code> 方法来避免 <code>回调地狱</code> 了。</p><h2 id="题13、0-1-0-2的结果？（JS中的小数运算）"><a href="#题13、0-1-0-2的结果？（JS中的小数运算）" class="headerlink" title="题13、0.1+0.2的结果？（JS中的小数运算）"></a>题13、0.1+0.2的结果？（JS中的小数运算）</h2><p>在JS 中小数的运算不精确，所以结果不一定是 <code>0.3</code> 。</p><p><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/06.png"></p><p>为了让它精确需要使用 <code>toFixed</code> 函数：</p><p>参数：精确到几位小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="题14、-数组、对象、集合的条件筛选"><a href="#题14、-数组、对象、集合的条件筛选" class="headerlink" title="题14、 数组、对象、集合的条件筛选"></a>题14、 数组、对象、集合的条件筛选</h2><p>使用 数据中的 <code>filter</code> 方法，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> goods = [</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&#x27;huawei&#x27;</span>,</span><br><span class="line">price: <span class="number">3000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&#x27;xiaomi&#x27;</span>,</span><br><span class="line">price: <span class="number">1289</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询出价格大于1500元的商品（筛选）</span></span><br><span class="line">goods.filter(<span class="function"><span class="params">v</span>=&gt;</span>v.price&gt;<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 题15、 作用域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://gitee.com/meishijian/pic_imgage/raw/master/面试题/08.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">JS 中有三种作用域：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>全局作用域<span class="string">` ：定义在函数、类、对象等任何元素之外的变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ​ 在整个脚本所有的地方都可以直接使用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ​ 一直存在直到关闭浏览器并且手动删除</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>局部作用域<span class="string">` ：定义在函数内部的变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ​ 只能在函数内部使用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ​ 只在函数调用的过程中存在，当函数执行完之后，变量就销毁了~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>块级作用域<span class="string">` （ES6）：使用 let 和 const 定义的变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​ `</span> 块级<span class="string">` ：只在当前 `</span>&#123;&#125;<span class="string">` （代码块） 中有效。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JS</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">10</span> <span class="comment">// 块级作用域，只在当前&#123;&#125;中执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(age) <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age1 = <span class="number">20</span> <span class="comment">// 全局</span></span><br><span class="line">    <span class="built_in">console</span>.log(age1) <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// 报错，未定义~</span></span><br><span class="line"><span class="built_in">console</span>.log(age1) <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="题16、基础类和引用类型有什么区别？"><a href="#题16、基础类和引用类型有什么区别？" class="headerlink" title="题16、基础类和引用类型有什么区别？"></a>题16、基础类和引用类型有什么区别？</h2><p><code>引用类型</code> ：对象（包括数组）。</p><p>在传值时的区别：</p><p>​ <code>基础类型</code> ：先数据复制一份，把新复制出来的数据传过去。（多份数据）</p><p>​ <code>引用类型</code> ：把当前数据在内存中的地址传过去。（一份数据）</p><p><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/07.png"></p><h2 id="题17、以下代码的输出结果并说明"><a href="#题17、以下代码的输出结果并说明" class="headerlink" title="题17、以下代码的输出结果并说明"></a>题17、以下代码的输出结果并说明</h2><p>说明代码的输出结果，并做简单说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果： <code>333</code> 。</p><p>原理： <code>setTimeout</code> 是异步的，所以外层并不会 <code>等1秒</code> ，所以外层循环 <code>一瞬间</code> 就执行了，然后1秒之后再打印时，i的值已经加到3了，所以会打印出3个3。</p><p>如果想打印 <code>012</code> ，可以将 <code>var</code> 改成 <code>let</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时打印结果是 <code>012</code> 。</p><p>还可以用这种方式实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时打印的也是 <code>012</code> 。</p><h2 id="题18、JS的事件冒泡-和捕获"><a href="#题18、JS的事件冒泡-和捕获" class="headerlink" title="题18、JS的事件冒泡 和捕获"></a>题18、JS的事件冒泡 和捕获</h2><p>JS 中有两种版本（级别）的事件机制，分别是 <code>DOM0级事件机制</code> 和 <code>DOM2级事件机制</code> 。</p><p><code>DOM0</code> ：JS 最早的事件机制</p><p><code>DOM1</code> ：没有为事件添加新功能</p><p><code>DOM2</code> ：在DOM2中添加了新的事件机制</p><p>回答：JS有 <code>DOM0</code> 和 <code>DOM2</code> 两个级别，DOM2支持 <code>捕获</code> 和 <code>冒泡</code> 两个阶段，DOM2中使用 <code>addEventListener</code> 绑定事件，默认事件是在冒泡阶段执行，如果设置 <code>第3个参数</code> 为 <code>true</code> 那么事件会在捕获阶段执行。DOM0级事件只支持 <code>冒泡阶段触发</code> ，DOM0级绑定事件时使用 <code>onxxx</code> .</p><h3 id="DOM0"><a href="#DOM0" class="headerlink" title="DOM0"></a>DOM0</h3><ol><li>绑定事件时使用 <code>onxxx</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>同一个事件只能绑定一次，否则就会覆盖</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后面这个 onclick 会覆盖前一个 onclick</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有冒泡阶段<br><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/09.png"></p><h3 id="DOM2"><a href="#DOM2" class="headerlink" title="DOM2"></a>DOM2</h3><p><strong>增强了事件功能。</strong></p><ol><li>使用 addEventListener 绑定事件，使用 removeEventListener 删除事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>同一个事件可以绑定多次</li></ol><p><strong>多个事件在触发按顺序触发</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第2个执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第3个执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>事件在触发可以在 捕获 和 冒泡两个阶段，默认是在冒泡阶段触发，可以通过第3个参数设置成捕获阶段触发</li></ol><p><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/10.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">true</span>) <span class="comment">// 捕获</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;) <span class="comment">// 冒泡</span></span><br></pre></td></tr></table></figure><p>代码演示，捕获和冒泡 的区别：</p><p> 冒泡时打印结果： <code>2 1</code> （先执行里面的按钮，再向上冒泡执行外面的div的事件）</p><pre><code class="HTML">&lt;div class=&quot;box left&quot; id=&quot;div&quot;&gt;        &lt;button id=&quot;btn&quot;&gt;hello&lt;/button&gt;   &lt;/div&gt;    &lt;script&gt;        let div = document.getElementById(&#39;div&#39;)        let btn = document.getElementById(&#39;btn&#39;)        // 冒泡阶段执行        div.addEventListener(&#39;click&#39;, function()&#123;            console.log(1)        &#125;)        btn.addEventListener(&#39;click&#39;, function()&#123;            console.log(2)        &#125;)    &lt;/script&gt;</code></pre><p> 捕获阶段执行时：打印 <code>1 2</code> （先执行外面的 div 事件，然后再传到里面的 btn 的 click 事件）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 捕获阶段执行</span></span></span><br><span class="line"><span class="javascript">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="题19、-事件代理"><a href="#题19、-事件代理" class="headerlink" title="题19、 事件代理"></a>题19、 事件代理</h2><p><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/11.png"></p><p>JS 事件代理也叫 <code>事件委托</code> 。当我们要为多个元素 <code>绑定相同的事件</code> 时，如果每个元素都绑定一次会比较麻烦，这时我们可以利用 <code>冒泡机制</code> 的特点（向上传递事件），把这个事件绑定到它们的 <code>父元素</code> 上，这时 <code>只需要绑定一次</code> 事件即可。由父元素 <code>代理</code> 子元素的事件。</p><p>代码说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: black;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            margin: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            margin: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 实现功能：点击li时让它的颜色变成红色。</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 下面代码的缺点：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 绑定20次 click 事件，性能不好</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 如果需要再添加新的 li ，那么就还需要再为新的 li 也绑定 click 事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 先选中出有的 li</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    let lis = document.getElementsByTagName(&#x27;li&#x27;)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    // 循环所有的LI绑定点击事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    for(let i=0;i&lt;lis.length;i++) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//        lis[i].onclick = function()&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//            this.style.color = &#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//        &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 更好的做法：事件代理</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 好处：1. 只绑定一次事件，性能 更好</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//      2. 再添加更多的子元素时，无须再为子元素绑定事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 由于事件冒泡，所以点击 li 时，这个事件也会被上传给 ul</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 所以可以直接绑定给父元素，由父元素代理这个点击事件</span></span></span><br><span class="line"><span class="javascript">        ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 先获取事件源（不同的浏览器获取方式不同）</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        IE:e.srcElement</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        其他浏览器： e.target</span></span></span><br><span class="line">            if (e.target) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.target.nodeName == <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    e.target.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.srcElement.nodeName == <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    e.srcElement.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="题20、数组的splice方法是用来干什么的？每个参数有什么作用？"><a href="#题20、数组的splice方法是用来干什么的？每个参数有什么作用？" class="headerlink" title="题20、数组的splice方法是用来干什么的？每个参数有什么作用？"></a>题20、数组的splice方法是用来干什么的？每个参数有什么作用？</h2><p>从数组中截取一部分数据。</p><p>参数一、 <code>开始截取的下标</code><br>参数二、 <code>要截取出几个</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = a.splice(<span class="number">1</span>, <span class="number">3</span>) <span class="comment">// b= [2,3,4]   a=[1,5]</span></span><br></pre></td></tr></table></figure><h2 id="题21、map-函数是干什么用的"><a href="#题21、map-函数是干什么用的" class="headerlink" title="题21、map 函数是干什么用的"></a>题21、map 函数是干什么用的</h2><p><code>map</code> ：循环一个数组中的每一个 <code>元素</code> ，然后可以对每个 <code>元素进行处理</code> ，然后用 <code>处理完</code> 之后的数组 <code>组成一个新数组</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 保存了所有的圆的半径</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment">// 请求计算每个圆的面积，然后把结果保存到另一个数组中</span></span><br><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理每一条记录的代码</span></span><br><span class="line">    <span class="keyword">return</span> v * v * <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 简写成箭头函数：</span></span><br><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="params">v</span> =&gt;</span> v * v * <span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><h2 id="题22、原生JS哪些方法可以对数组去重"><a href="#题22、原生JS哪些方法可以对数组去重" class="headerlink" title="题22、原生JS哪些方法可以对数组去重"></a>题22、原生JS哪些方法可以对数组去重</h2><p><code>indexOf</code> 、 <code>sort</code> 、 <code>splice</code> 、 <code>includes</code> 、 <code>filter</code> 等等都可以实现</p><p>思路：使用 ES6 中的 <code>Set</code> 数据结构。</p><p>ES6 中新出一个数据结构 <code>Set（集合）</code> ， </p><p><code>特点</code> ：用来保存多个值，但不能重复。</p><p>实现思路：先把数组转成 <code>Set（去重）</code> ，再转回数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(a))</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> b = [...new <span class="built_in">Set</span>[a]]</span><br></pre></td></tr></table></figure><h2 id="题23、JS-中如何监听-DOM-元素的改变？"><a href="#题23、JS-中如何监听-DOM-元素的改变？" class="headerlink" title="题23、JS 中如何监听 DOM 元素的改变？"></a>题23、JS 中如何监听 DOM 元素的改变？</h2><p>JS 中可以使用 <code>MutationObserver</code> 接口来实现 <code>DOM 元素的监听</code> 。</p><p>缺点：必须 <code>IE11</code> 以上才能使用！</p><p><img src= "/msj_blog.io/img/loading.gif" data-lazy-src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%9D%A2%E8%AF%95%E9%A2%98/11.png"></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 回调函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onChange</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;dom 元素被改变了~~&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 创建监听对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> ob = <span class="keyword">new</span> MutationObserver(onChange)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 启动监听器</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数一、要监听的 HTML 节点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数二、配置项</span></span></span><br><span class="line">        ob.observe(app, &#123;</span><br><span class="line"><span class="javascript">            attributes: <span class="literal">true</span>, <span class="comment">// 是否属性监听属性值的改变</span></span></span><br><span class="line"><span class="javascript">            subtree: <span class="literal">true</span>, <span class="comment">// 是否监听子节点的改变</span></span></span><br><span class="line"><span class="javascript">            childList: <span class="literal">true</span> <span class="comment">// 是否监听添加、删除子节点事件</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 创建文章、标签、分类</title>
      <link href="/msj_blog.io/2020/09/24/hexo-%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB/"/>
      <url>/msj_blog.io/2020/09/24/hexo-%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><h2 id="在hexo下创建一个新的文章"><a href="#在hexo下创建一个新的文章" class="headerlink" title="在hexo下创建一个新的文章"></a>在hexo下创建一个新的文章</h2><pre><code>hexo new &quot;文章名称&quot;</code></pre><p>生产后会提示你文件路径，一般在hexo/source/_posts下</p><h2 id="文章基本设置"><a href="#文章基本设置" class="headerlink" title="文章基本设置"></a>文章基本设置</h2><pre><code>---title: hexo 创建文章、标签、分类date: 2020-09-25 09:54:40 categories: &quot;Hexo&quot; # 分类tags:   # 标签    - Hexo    - Hexos---</code></pre><h1 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h1><h2 id="创建标签页面"><a href="#创建标签页面" class="headerlink" title="创建标签页面"></a>创建标签页面</h2><pre><code>hexo new page tags</code></pre><p>生产后会提示你文件路径，一般在hexo/source/_posts下</p><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><pre><code>title: tagsdate: 2020-09-25 09:54:40 type: &quot;tags&quot;</code></pre><h1 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h1><h2 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h2><pre><code>hexo new page categories</code></pre><h2 id="基本设置-1"><a href="#基本设置-1" class="headerlink" title="基本设置"></a>基本设置</h2><pre><code>title: categoriesdate: 2020-09-25 09:54:40 type: &quot;categories&quot;</code></pre><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><p>其中 <code>&lt;模板&gt;</code> 在 <code>scaffolds</code> 中，默认情况下有三个模板 <code>post</code> 、 <code>draft</code> 、 <code>page</code> .</p><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><p>通常情况下使用 <code>hexo new post &lt;title&gt;</code> 即可，注意这里的 <code>title</code> 不是文章名，<br>具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title 为 article</p><p>命令行输入 <code>hexo new post article</code> , 此时在 <code>source/_posts/</code> 文件夹中多了一个 <code>article.md</code> 文件</p><p>文章内容中两条 <code>---</code> 之间的内容为文章的配置内容，可以在其中设置标签、分类等。<br>其中的 <code>title</code> 为文章发布后文章页面显示的标题，例如我们修改一下 tittle 为：Hexo博客文章发布</p><p>而 <code>.md</code> 文件的名字，也就是我们新建文章时输入的名字，是作为文章页面链接中显示的名字，<br>例如，本篇文章的文件名为： <code>article.md</code> ，文章内设置的文章标题为 <code>Hexo博客新建文章并发布</code></p><h2 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h2><p>在新建文章中使用的 <code>post</code> 参数，就是模板的名称，在使用 <code>hexo new post &lt;文件名&gt;</code> 命令进行新建文章时，<br>系统会自动在 <code>scaffolds</code> 文件夹中搜寻名为 <code>post</code> 的文件，根据其中的内容生成新的 <code>.md</code> 文章文件。后续随着配置项的增多，可以自行设置不同类型的模板。 </p><p>其中的 <code>title</code> 跟 <code>data</code> 会在生成文件时自动填写。利用此模板生成的文章文件，只需要进行对应项目的填写即可</p><h2 id="给文章添加分类和模板"><a href="#给文章添加分类和模板" class="headerlink" title="给文章添加分类和模板"></a>给文章添加分类和模板</h2><p>通过对文件头部配置信息中 <code>tags</code> 与 <code>categories</code> 项的修改可以设置文章的标签及分类。</p><p>其中标签可以按格式贴现设置多个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo博客新建文章并发布</span><br><span class="line">date: 2018-12-06 12:16:12</span><br><span class="line">tags:</span><br><span class="line"> - Hexo</span><br><span class="line"> - Markdown</span><br><span class="line">categories: 搭建博客</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode_markdown格式化</title>
      <link href="/msj_blog.io/2020/09/11/vscode-markdown%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/msj_blog.io/2020/09/11/vscode-markdown%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vscode-markdown格式化"><a href="#vscode-markdown格式化" class="headerlink" title="vscode_markdown格式化"></a>vscode_markdown格式化</h1><h3 id="1、vscode-插件markdown-formatter"><a href="#1、vscode-插件markdown-formatter" class="headerlink" title="1、vscode 插件markdown-formatter"></a>1、vscode 插件markdown-formatter</h3><pre><code>在 VSCode 中 按下 Ctrl+shift+X,输入 markdown-formatter, 找到以下图片样子，然后 点击 安装</code></pre><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/vscode_markdown%E6%A0%BC%E5%BC%8F%E5%8C%96/image-20200911102733705.png"></p><h3 id="2-完成第一步后，操作一下命令"><a href="#2-完成第一步后，操作一下命令" class="headerlink" title="2. 完成第一步后，操作一下命令"></a>2. 完成第一步后，操作一下命令</h3><pre><code>-- 1、打开 文件&gt;首选项&gt;设置&gt;扩展-- 2、找到 &quot; Markdown Formatter &quot;-- 3、于是找 到 style , 点击下面的 编辑</code></pre><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/vscode_markdown%E6%A0%BC%E5%BC%8F%E5%8C%96/image-20200911103123016.png"></p><pre><code>--- 4、于是把下面的代码 复制粘贴过去</code></pre><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// settings.json</span></span><br><span class="line"><span class="comment">// markdown-formatter conf</span></span><br><span class="line"><span class="comment">// 按照js格式化</span></span><br><span class="line"><span class="comment">// &quot;markdownFormatter.codeAreaToBlock&quot;: &quot;js&quot;, </span></span><br><span class="line"><span class="comment">// 不格式化</span></span><br><span class="line">&quot;markdownFormatter.codeAreaToBlock&quot;: &quot;&quot;, </span><br><span class="line"><span class="comment">// 自动格式化标点</span></span><br><span class="line">&quot;markdownFormatter.fullWidthTurnHalfWidth&quot;: &quot;auto&quot;, </span><br><span class="line"><span class="comment">// 中文标点格式化为英文</span></span><br><span class="line"><span class="comment">// &quot;markdownFormatter.fullWidthTurnHalfWidth&quot;: &quot;，：；！“”‘’（）？。&quot;, </span></span><br><span class="line">&quot;markdownFormatter.formatOpt&quot;: &#123;</span><br><span class="line">  &quot;indent_size&quot;: 2</span><br><span class="line">&#125;, </span><br><span class="line">&quot;[markdown]&quot;: &#123;</span><br><span class="line">  <span class="comment">// 自动保存</span></span><br><span class="line">  &quot;editor.formatOnSave&quot;: true, </span><br><span class="line">  <span class="comment">// 显示空格</span></span><br><span class="line">  &quot;editor.renderWhitespace&quot;: &quot;all&quot;, </span><br><span class="line">  <span class="comment">// 快速补全</span></span><br><span class="line">  &quot;editor.quickSuggestions&quot;: &#123;</span><br><span class="line">  </span><br><span class="line">    &quot;other&quot;: true,</span><br><span class="line">    &quot;comments&quot;: true,</span><br><span class="line">    &quot;strings&quot;: true</span><br><span class="line"></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">// snippet 提示优先</span></span><br><span class="line">  &quot;editor.snippetSuggestions&quot;: &quot;top&quot;, </span><br><span class="line">  &quot;editor.tabCompletion&quot;: &quot;on&quot;, </span><br><span class="line">  <span class="comment">// 使用enter 接受提示</span></span><br><span class="line">  &quot;editor.acceptSuggestionOnEnter&quot;: &quot;on&quot;, </span><br><span class="line">  <span class="comment">// 默认格式化工具为本工具</span></span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;mervin.markdown-formatter&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-重启vscode"><a href="#3-重启vscode" class="headerlink" title="3. 重启vscode"></a>3. 重启vscode</h3><h3 id="4-格式化"><a href="#4-格式化" class="headerlink" title="4. 格式化"></a>4. 格式化</h3><pre><code>使用 shift+option+f (osx) 或者 ctrl+shift+f (window) 快速格式化。</code></pre>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode_背景图片</title>
      <link href="/msj_blog.io/2020/09/11/vscode-%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
      <url>/msj_blog.io/2020/09/11/vscode-%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vscode-背景图片"><a href="#vscode-背景图片" class="headerlink" title="vscode_背景图片"></a>vscode_背景图片</h1><h3 id="1-首先在vscode扩展中，找到background这个插件，快捷键Ctrl-shift-x"><a href="#1-首先在vscode扩展中，找到background这个插件，快捷键Ctrl-shift-x" class="headerlink" title="1. 首先在vscode扩展中，找到background这个插件，快捷键Ctrl+shift+x"></a>1. 首先在vscode扩展中，找到background这个插件，快捷键Ctrl+shift+x</h3><h3 id="2-完成第一步就已经有默认背景了，可是想设置自己喜欢的怎么办？往下看"><a href="#2-完成第一步就已经有默认背景了，可是想设置自己喜欢的怎么办？往下看" class="headerlink" title="2. 完成第一步就已经有默认背景了，可是想设置自己喜欢的怎么办？往下看"></a>2. 完成第一步就已经有默认背景了，可是想设置自己喜欢的怎么办？往下看</h3><pre><code>-- 1、打开 文件&gt;首选项&gt;设置&gt;扩展-- 2、找到 &quot; Plugin background config. background插件配置 &quot;-- 3、于是找 到 style , 点击下面的 编辑</code></pre><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/vscode_%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/image-20200911100541852.png"></p><pre><code>-- 4、于是把下面的代码，复制粘贴过去，修改项目内容</code></pre><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">&quot;background.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;background.useDefault&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;background.customImages&quot;</span>: [</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;file://E:/图片/壁纸/68.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;file://E:/图片/壁纸/68.jpg&quot;</span>, </span><br><span class="line">        <span class="string">&quot;file://E:/图片/壁纸/68.jpg&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;background.style&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;&#x27;&#x27;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pointer-events&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;z-index&quot;</span>: <span class="string">&quot;99999&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;height&quot;</span>: <span class="string">&quot;100%&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;background-position&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;background-repeat&quot;</span>: <span class="string">&quot;no-repeat&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;background-size&quot;</span>: <span class="string">&quot;100%,100%&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;opacity&quot;</span>: <span class="number">0.2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;git.confirmSync&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;git.enableSmartCommit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;editor.minimap.maxColumn&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">&quot;git.autofetch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.rendererType&quot;</span>: <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;Visual Studio Dark&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;liveshare.presence&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;octref.vetur&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dart.checkForSdkUpdates&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;vscode-great-icons&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.colorCustomizations&quot;</span>: &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>-- 5、最后就是background.style了，大家看着设置就好了，懂点css的都知道。注意后面的&quot;opacity&quot;: 0.1透明度是可以设置的。</code></pre><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/vscode_%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/image-20200911101011996.png"></p><h3 id="3-重启vscode"><a href="#3-重启vscode" class="headerlink" title="3. 重启vscode"></a>3. 重启vscode</h3><h3 id="4-格式化"><a href="#4-格式化" class="headerlink" title="4. 格式化"></a>4. 格式化</h3><pre><code>使用 shift+option+f (osx) 或者 ctrl+shift+f (window) 快速格式化。</code></pre>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布Vue组件库到NPM上</title>
      <link href="/msj_blog.io/2020/09/11/%E5%8F%91%E5%B8%83Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E5%88%B0NPM%E4%B8%8A/"/>
      <url>/msj_blog.io/2020/09/11/%E5%8F%91%E5%B8%83Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E5%88%B0NPM%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>typora-root-url: image<br>typora-copy-images-to: image</p><hr><h1 id="一、发布-Vue-组库到-NPM-上"><a href="#一、发布-Vue-组库到-NPM-上" class="headerlink" title="一、发布 Vue 组库到 NPM 上"></a>一、发布 Vue 组库到 NPM 上</h1><h3 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h3><h3 id="1-使用-vue-li3-新建一个-vue-的项目"><a href="#1-使用-vue-li3-新建一个-vue-的项目" class="headerlink" title="1. 使用 vue li3 新建一个 vue 的项目"></a>1. 使用 vue li3 新建一个 vue 的项目</h3><h3 id="2-根据规范编写组件代码"><a href="#2-根据规范编写组件代码" class="headerlink" title="2. 根据规范编写组件代码"></a>2. 根据规范编写组件代码</h3><h4 id="2-1-创建-packages-目录用来保存所有的组件"><a href="#2-1-创建-packages-目录用来保存所有的组件" class="headerlink" title="2.1 创建 /packages 目录用来保存所有的组件"></a>2.1 创建 /packages 目录用来保存所有的组件</h4><h4 id="2-2-每个组件文件结构："><a href="#2-2-每个组件文件结构：" class="headerlink" title="2.2 每个组件文件结构："></a>2.2 每个组件文件结构：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;packages&#x2F;</span><br><span class="line">swiper&#x2F;</span><br><span class="line">src&#x2F;</span><br><span class="line">swiper.vue : 组件代码</span><br><span class="line">index.js   : 把组件导出安装到 vue 中的代码</span><br><span class="line">index.js   : 所有的组件 引入 处理 导出</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585358130115.png"></p><h3 id><a href="#" class="headerlink" title></a><!-- 以下是 配置可以安装全局组件 或 部分组件--></h3><h5 id="2-2-1-中-packages-swiper-src-seiper-vue-案例代码"><a href="#2-2-1-中-packages-swiper-src-seiper-vue-案例代码" class="headerlink" title="2.2.1 中 /packages/swiper/src/seiper.vue 案例代码"></a>2.2.1 中 <code>/packages/swiper/src/seiper.vue</code> 案例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;packages&#x2F;swiper&#x2F;src&#x2F;seiper.vue</span><br><span class="line"></span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;swiper&lt;&#x2F;h1&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">              name: &quot;swiper&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-中-packages-swiper-src-index-js-案例代码"><a href="#2-2-2-中-packages-swiper-src-index-js-案例代码" class="headerlink" title="2.2.2 中 /packages/swiper/src/index.js 案例代码"></a>2.2.2 中 <code>/packages/swiper/src/index.js</code> 案例代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/packages/swiper / src / index.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> swiper <span class="keyword">from</span> <span class="string">&#x27;./src/swiper.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为这个组件添加一个 install 函数</span></span><br><span class="line"><span class="comment">// 有了这个函数之后，以后用时 就可以使用 Vue.use(swiper) 将组件注册 (Vue插件)</span></span><br><span class="line"><span class="comment">// 参数：对象</span></span><br><span class="line">swiper.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 安装这个组件的代码， </span></span><br><span class="line">    <span class="comment">// 将组件 注册到 Vue 中的 全局组件</span></span><br><span class="line">    Vue.component(swiper.name, swiper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> swiper;</span><br></pre></td></tr></table></figure><h4 id="2-3-在-packages-目录下-创建-index-js-文件"><a href="#2-3-在-packages-目录下-创建-index-js-文件" class="headerlink" title="2.3 在 /packages 目录下 创建 index.js 文件"></a>2.3 在 /packages 目录下 创建 index.js 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;packages&#x2F;index.js : 项目的启动文件，用来把所有的组件批量加载到 VUE 中</span><br></pre></td></tr></table></figure><h5 id="2-3-1-中-packages-index-js-案例代码"><a href="#2-3-1-中-packages-index-js-案例代码" class="headerlink" title="2.3.1 中 /packages/index.js 案例代码"></a>2.3.1 中 <code>/packages/index.js</code> 案例代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/packages/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入所以组件</span></span><br><span class="line"><span class="keyword">import</span> swiper <span class="keyword">from</span> <span class="string">&#x27;./swiper/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放到数组中</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">    swiper</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建个 install 函数</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 循环所以的组件 并注册</span></span><br><span class="line">    components.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.component(e.name, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install,</span><br><span class="line">    swiper</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title></a><!-- 以下是 配置 只安装全局组件 --></h3><h4 id="2-4-在-packages-目录下-创建-index-js-文件"><a href="#2-4-在-packages-目录下-创建-index-js-文件" class="headerlink" title="2.4 在 /packages 目录下 创建 index.js 文件"></a>2.4 在 /packages 目录下 创建 index.js 文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入所有组件 </span></span><br><span class="line"><span class="keyword">import</span> swiper <span class="keyword">from</span> <span class="string">&#x27;./swiper/src/swiper.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放到数组中</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">    swiper</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建个 install 函数</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 循环所以的组件 并注册</span></span><br><span class="line">    components.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.component(e.name, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585394783996.png"></p><h3 id="3-是否打包-css-文件"><a href="#3-是否打包-css-文件" class="headerlink" title="3. 是否打包 css 文件"></a>3. 是否打包 css 文件</h3><h4 id="3-1-先创建-vue-config-js-在根目录创建"><a href="#3-1-先创建-vue-config-js-在根目录创建" class="headerlink" title="3.1 先创建 vue.config.js 在根目录创建"></a>3.1 先创建 <code>vue.config.js</code> 在根目录创建</h4><h4 id="3-2-打包-css-文件-打包css，就不需写以下代码）"><a href="#3-2-打包-css-文件-打包css，就不需写以下代码）" class="headerlink" title="3.2 打包 css 文件 (打包css，就不需写以下代码）"></a>3.2 打包 css 文件 (打包css，就不需写以下代码）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    css: &#123;</span><br><span class="line">        extract: <span class="literal">true</span> <span class="comment">// 组件中的CSS 需要打包出来， 默认为 打包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-不打包-css-文件"><a href="#3-3-不打包-css-文件" class="headerlink" title="3.3 不打包 css 文件"></a>3.3 不打包 css 文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    css: &#123;</span><br><span class="line">        extract: <span class="literal">false</span> <span class="comment">// 组件中的CSS 不需要打包出来， 默认为 打包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585393432200.png"></p><h3 id="4-以-“包模式”-打包代码"><a href="#4-以-“包模式”-打包代码" class="headerlink" title="4. 以 “包模式” 打包代码"></a>4. 以 “包模式” 打包代码</h3><h4 id="4-1-修改-package-json-添加指令"><a href="#4-1-修改-package-json-添加指令" class="headerlink" title="4.1 修改 package.json 添加指令"></a>4.1 修改 <code>package.json</code> 添加指令</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;lib&quot;: &quot;vue-cli-service build --target lib --dest lib --name vue-sw packages/index.js&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585359594516.png"></p><h4 id="4-2-打包：-npm-run-lib-需要把-lib-文件上-到-npm-上"><a href="#4-2-打包：-npm-run-lib-需要把-lib-文件上-到-npm-上" class="headerlink" title="4.2 打包： npm run lib 需要把 lib 文件上 到 npm 上"></a>4.2 打包： <code>npm run lib</code> 需要把 lib 文件上 到 npm 上</h4><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585359740155.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585359752323.png"></p><h3 id="5-修改-package-json-文件，配置一下库信息"><a href="#5-修改-package-json-文件，配置一下库信息" class="headerlink" title="5. 修改 package.json 文件，配置一下库信息"></a>5. 修改 <code>package.json</code> 文件，配置一下库信息</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line"></span><br><span class="line">&quot;name&quot;: &quot;vue-sw&quot;, // 组件名字</span><br><span class="line">    &quot;private&quot;: false, // 是否为私有的  false : 不是私有的</span><br><span class="line">    &quot;main&quot;: &quot;lib/vue-sw.umd.min.js&quot;, // 入口文件</span><br><span class="line">    &quot;author&quot;: &quot;msj&quot;, // 作者名</span><br></pre></td></tr></table></figure><h3 id="6-创建-npmignore-文件设置忽略"><a href="#6-创建-npmignore-文件设置忽略" class="headerlink" title="6. 创建 .npmignore 文件设置忽略"></a>6. 创建 <code>.npmignore</code> 文件设置忽略</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要上传: lib 目录 、 package,json 、 README.md</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585360490027.png"></p><h3 id="-2"><a href="#-2" class="headerlink" title></a><!--以下指令前提：先把源切换回官方网站 -- 不能是淘宝镜像--></h3><h5 id="办法一-："><a href="#办法一-：" class="headerlink" title="办法一 ："></a>办法一 ：</h5><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585361545346.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585361564068.png"></p><h5 id="办法二"><a href="#办法二" class="headerlink" title="办法二 :"></a>办法二 :</h5><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585361646459.png"></p><h3 id="7-创建-npm-账号"><a href="#7-创建-npm-账号" class="headerlink" title="7. 创建 npm 账号"></a>7. 创建 npm 账号</h3><h4 id="7-1-到官方网站上创建"><a href="#7-1-到官方网站上创建" class="headerlink" title="7.1 到官方网站上创建"></a>7.1 到官方网站上创建</h4><h4 id="7-2-指令：-npm-adduser"><a href="#7-2-指令：-npm-adduser" class="headerlink" title="7.2 指令： npm adduser"></a>7.2 指令： <code>npm adduser</code></h4><h3 id="8-登录-npm-login"><a href="#8-登录-npm-login" class="headerlink" title="8. 登录 npm login"></a>8. 登录 <code>npm login</code></h3><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585361311651.png"></p><h3 id="9-发布-npm-publish"><a href="#9-发布-npm-publish" class="headerlink" title="9. 发布 npm publish"></a>9. 发布 <code>npm publish</code></h3><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585361759395.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布完可以去官方网站上查一下 https://www.npmjs.com/ </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585362589715.png"></p><h1 id="二、使用UI库流程"><a href="#二、使用UI库流程" class="headerlink" title="二、使用UI库流程"></a>二、使用UI库流程</h1><h3 id="1-安装-一个-vue-项目-并-下载-自己发布的-组件库-vue-sw"><a href="#1-安装-一个-vue-项目-并-下载-自己发布的-组件库-vue-sw" class="headerlink" title="1. 安装 一个 vue 项目 并 下载 自己发布的 组件库 (vue-sw)"></a>1. 安装 一个 vue 项目 并 下载 自己发布的 组件库 (vue-sw)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create msj <span class="comment">// 安装 一个 vue 项目</span></span><br><span class="line">npm i vue - sw <span class="comment">// 下载 自己发布的 组件库</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585363037991.png"></p><h3 id="2-项目中使用"><a href="#2-项目中使用" class="headerlink" title="2. 项目中使用"></a>2. 项目中使用</h3><h4 id="2-1-全局引入-加载一次所有页面都能用"><a href="#2-1-全局引入-加载一次所有页面都能用" class="headerlink" title="2.1 全局引入 :  加载一次所有页面都能用"></a>2.1 全局引入 :  加载一次所有页面都能用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 src/main.js (入口 文件)</span></span><br><span class="line"><span class="keyword">import</span> vueSw <span class="keyword">from</span> <span class="string">&#x27;vue-sw&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;vue-sw/lib/vue-sw.css&quot;</span></span><br><span class="line">Vue.use(vueSw) <span class="comment">// 安装所有的组件</span></span><br><span class="line"></span><br><span class="line">Vue.use(vueSw.swiper) <span class="comment">// 只安装 swiper 这一个组件</span></span><br><span class="line"><span class="comment">// 然后在所有的组件中都可以直接使用</span></span><br></pre></td></tr></table></figure><h4 id="2-2-局部使用-只在某一个组件中使用"><a href="#2-2-局部使用-只在某一个组件中使用" class="headerlink" title="2.2 局部使用 :  只在某一个组件中使用"></a>2.2 局部使用 :  只在某一个组件中使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中引入</span></span><br><span class="line"><span class="keyword">import</span> vueSw <span class="keyword">from</span> <span class="string">&#x27;vue-sw&#x27;</span></span><br><span class="line"><span class="comment">// 在 components 中注册一下</span></span><br><span class="line">&lt;</span><br><span class="line">script &gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            swiper: vueSw.swiper</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; &lt;</span><br><span class="line">/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585367241546.png"></p><h1 id="三、修改组件库"><a href="#三、修改组件库" class="headerlink" title="三、修改组件库"></a>三、修改组件库</h1><h3 id="1-先重新打包"><a href="#1-先重新打包" class="headerlink" title="1. 先重新打包"></a>1. 先重新打包</h3><h3 id="2-修改-package-json-中的版本号"><a href="#2-修改-package-json-中的版本号" class="headerlink" title="2. 修改 package.json 中的版本号"></a>2. 修改 <code>package.json</code> 中的版本号</h3><h4 id="2-1-直接修改-package-json-中的版本号"><a href="#2-1-直接修改-package-json-中的版本号" class="headerlink" title="2.1 直接修改 package.json 中的版本号"></a>2.1 直接修改 <code>package.json</code> 中的版本号</h4><h4 id="2-2-通过-npm-指令增加版本号-要求：git-提交之后才能使用"><a href="#2-2-通过-npm-指令增加版本号-要求：git-提交之后才能使用" class="headerlink" title="2.2 通过 npm 指令增加版本号 (要求：git 提交之后才能使用)"></a>2.2 通过 npm 指令增加版本号 (要求：git 提交之后才能使用)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm version patch</span></span><br><span class="line"><span class="comment">// npm versionminor</span></span><br><span class="line"><span class="comment">// npm versionmajor</span></span><br><span class="line"></span><br><span class="line">版本号的组成： major(主版本).minor(次版本).patch(补丁)</span><br><span class="line"><span class="comment">// patch: 本次修改了些 BUG , 就应该修改 如：0.1.0 --&gt; 0.1.1</span></span><br><span class="line"><span class="comment">// minor: 添加了新的功能，原来的功能不影响 如：0.1.0 --&gt; 0.1.1</span></span><br><span class="line"><span class="comment">// major: 代码做了大的改动，以前的代码已经不兼容 如：0.1.0 --&gt; 0.1.1</span></span><br></pre></td></tr></table></figure><h3 id="3-然后-npm-publish-发布"><a href="#3-然后-npm-publish-发布" class="headerlink" title="3. 然后 npm publish 发布"></a>3. 然后 <code>npm publish</code> 发布</h3><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585366864442.png"></p><h1 id="四、更新-NPM-包的版本"><a href="#四、更新-NPM-包的版本" class="headerlink" title="四、更新 NPM 包的版本?"></a>四、更新 NPM 包的版本?</h1><h3 id="1-npm-i-包-版本号"><a href="#1-npm-i-包-版本号" class="headerlink" title="1. npm i 包@版本号"></a>1. npm i 包@版本号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i 包名@latest --&gt; 更新到最新版本</span></span><br></pre></td></tr></table></figure><h3 id="2-使用-npm-check-包-图形化的检查过期的包，然后更新"><a href="#2-使用-npm-check-包-图形化的检查过期的包，然后更新" class="headerlink" title="2. 使用 npm-check  包 (图形化的检查过期的包，然后更新)"></a>2. 使用 <code>npm-check  包</code> (图形化的检查过期的包，然后更新)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i npm-check -g &lt;--- 安装这个工具</span></span><br><span class="line"><span class="comment">// npm-check -u &lt;--- 安装之后就可以使用这个指令，检查所有过期的包</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585367079010.png"></p><h1 id="五、删除-上传的-NPM-包"><a href="#五、删除-上传的-NPM-包" class="headerlink" title="五、删除 上传的 NPM 包"></a>五、删除 上传的 NPM 包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish --force &#x2F;&#x2F;强制删除</span><br><span class="line">npm unpublish guitest@1.0.1 &#x2F;&#x2F;指定版本号</span><br><span class="line">npm deprecate &#x2F;&#x2F;某些情况</span><br></pre></td></tr></table></figure><h1 id="六、打包公共样式-或-打包-全局样式"><a href="#六、打包公共样式-或-打包-全局样式" class="headerlink" title="六、打包公共样式 或 打包 全局样式"></a>六、打包公共样式 或 打包 全局样式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在 / packages / index.js</span><br><span class="line">下 引入 你想引入的 css、 less、 scss</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入所有组件 </span></span><br><span class="line"><span class="keyword">import</span> swiper <span class="keyword">from</span> <span class="string">&#x27;./swiper/src/swiper.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../src/assets/base.scss&#x27;</span></span><br><span class="line"><span class="comment">// 放到数组中</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">    swiper</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建个 install 函数</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 循环所以的组件 并注册</span></span><br><span class="line">    components.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.component(e.name, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%94%BE%E5%88%B0NPM/1585401482234.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本操作</title>
      <link href="/msj_blog.io/2020/09/10/git/"/>
      <url>/msj_blog.io/2020/09/10/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><h3 id="克隆远程库"><a href="#克隆远程库" class="headerlink" title="克隆远程库"></a>克隆远程库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone (url)</span><br></pre></td></tr></table></figure><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><p>1.先把远程分支拉到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin 分支名称</span><br></pre></td></tr></table></figure><p>2.查看分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>3.创建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure><p>4.切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure><p>5.拉取分支代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 分支名称</span><br></pre></td></tr></table></figure><p>6.给之前没有建立关联的分支，指定必须要关联的远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;远程分支名 本地分支名</span><br></pre></td></tr></table></figure><ol start="7"><li>查看本地分支有没有跟远程分支建立联系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署项目到服务器</title>
      <link href="/msj_blog.io/2020/09/09/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
      <url>/msj_blog.io/2020/09/09/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><p>​    前提是 购买好服务器，例如： 阿里云 或者 腾讯 两者 都可以，我现在模拟 阿里云的 模拟器，因为我现在用的是 阿里云服务器。</p><p>​     购买后 进入 控制器 ，选到自己买的 服务器 有 云服务器ECS 和 轻量应用服务器，因为 云服务器ECS 和 轻量应用服务器不一样的。</p><p>​    例如：我买的是 云服务器ECS，进入后台是这个样子的， 云服务器ECS 和 轻量应用服务器 的界面不同。<br><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525194913216.png"> </p><p>​    进入到自己的服务界面操作</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525195253244.png"> </p><h2 id="部署项目-前必备的操作"><a href="#部署项目-前必备的操作" class="headerlink" title="部署项目 前必备的操作"></a>部署项目 前必备的操作</h2><h3 id="1、操作系统是-CentOS"><a href="#1、操作系统是-CentOS" class="headerlink" title="1、操作系统是  CentOS"></a>1、操作系统是  CentOS</h3><p>​    如果 是之前买过的服务器 ，可以选择重启 或者  重装，只要保证 操作系统是  CentOS </p><h5 id="买过的服务器"><a href="#买过的服务器" class="headerlink" title="买过的服务器"></a>买过的服务器</h5><h6 id="1、停止-服务器"><a href="#1、停止-服务器" class="headerlink" title="1、停止 服务器"></a>1、停止 服务器</h6><p>要想重装系统 ， 需要 先停止 服务器</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526122956864.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123013655.png"></p><p>; </p> <h6 id="2、更新系统"><a href="#2、更新系统" class="headerlink" title="2、更新系统"></a>2、更新系统</h6><p>停止完后  ，返回上一级目录，更新系统</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123131295.png"></p><h6 id="3、选择相应信息"><a href="#3、选择相应信息" class="headerlink" title="3、选择相应信息"></a>3、选择相应信息</h6><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123400910.png"></p><h6 id="4、成功"><a href="#4、成功" class="headerlink" title="4、成功"></a>4、成功</h6><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123459510.png"></p><h3 id="2、服务器必备操作"><a href="#2、服务器必备操作" class="headerlink" title="2、服务器必备操作"></a>2、服务器必备操作</h3><h4 id="第一步：重置密码"><a href="#第一步：重置密码" class="headerlink" title="第一步：重置密码"></a>第一步：重置密码</h4><p>需要重置密码</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526114106532.png"></p><h4 id="第二步：安装-软件"><a href="#第二步：安装-软件" class="headerlink" title="第二步：安装 软件"></a>第二步：安装 软件</h4><p>我用的连接 服务器的 是 FindlShell ，软件自行选择，我演示 FindlShell  如何操作</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526114409297.png"></p><h5 id="一、安装步骤"><a href="#一、安装步骤" class="headerlink" title="一、安装步骤"></a>一、安装步骤</h5><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526114646139.png" alt="image-20200526114646139"><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526114703323.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526114714367.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526114807565.png"></p><h5 id="二、连接服务器"><a href="#二、连接服务器" class="headerlink" title="二、连接服务器"></a>二、连接服务器</h5><p>启动软件</p><h6 id="1、新建连接"><a href="#1、新建连接" class="headerlink" title="1、新建连接"></a>1、新建连接</h6><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526114957753.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526115617713.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526115059226.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526115330294.png"></p><h6 id="2、查看新建连接"><a href="#2、查看新建连接" class="headerlink" title="2、查看新建连接"></a>2、查看新建连接</h6><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526115600489.png"></p><h6 id="3、打开-新建-的-连接"><a href="#3、打开-新建-的-连接" class="headerlink" title="3、打开 新建 的 连接"></a>3、打开 新建 的 连接</h6><p>直接双击 即可 打开，以下图，就是连接成功</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526115652726.png"></p><h4 id="第三步：创建宝塔面板"><a href="#第三步：创建宝塔面板" class="headerlink" title="第三步：创建宝塔面板"></a>第三步：创建宝塔面板</h4><h5 id="一、搜索访问-宝塔网址"><a href="#一、搜索访问-宝塔网址" class="headerlink" title="一、搜索访问 宝塔网址"></a>一、搜索访问 宝塔网址</h5><p>​        <a href="https://www.bt.cn/">https://www.bt.cn/</a></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526120002149.png"></p><h5 id="二、选择面板-系统"><a href="#二、选择面板-系统" class="headerlink" title="二、选择面板 系统"></a>二、选择面板 系统</h5><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526120059621.png"></p><h5 id="三、面板镜像"><a href="#三、面板镜像" class="headerlink" title="三、面板镜像"></a>三、面板镜像</h5><p>根据自己的服务器 的 cup 内存 安装镜像，要安装  **Centos ** 镜像</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526120334697.png"></p><p>复制 代码，到 FindlShell  软件中 下载，右击 –&gt; 粘贴，于是 回车 下载</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526120557881.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123643225.png"></p><p>过程中 需要 确认，确认 都是 y 。也就是 yes</p><p>安装好后，下面有一个 链接 和 用户名 密码，复制链接 到 浏览器 进行打开，输入 username 和 密码。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123848394.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 有的小伙计 复制过去的链接 打不开 ，说无法访问，需要添加安全组</span><br></pre></td></tr></table></figure><h5 id="四、在阿里云创建安全组"><a href="#四、在阿里云创建安全组" class="headerlink" title="四、在阿里云创建安全组"></a>四、在阿里云创建安全组</h5><h6 id="1、创建安全组"><a href="#1、创建安全组" class="headerlink" title="1、创建安全组"></a>1、创建安全组</h6><p>​    创建安全组就是 创建一个端口，然后进行放行就可以了（ 放行下面会说到 ）：</p><p>​    例如：左下侧有个 网络与安全 –&gt; 安全组</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525200735111.png" alt style="zoom:80%; "><h6 id="2、安全组列表"><a href="#2、安全组列表" class="headerlink" title="2、安全组列表"></a>2、安全组列表</h6><p>于是进入到 安全组列表，右侧有个配置 规则点击，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525200850785.png"></p><h6 id="3、手动添加"><a href="#3、手动添加" class="headerlink" title="3、手动添加"></a>3、手动添加</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 因为 宝塔 默认的 端口  是 <span class="number">8888</span>  ，所以需要添加 <span class="number">8888</span> 端口</span><br></pre></td></tr></table></figure><p>然后进入到 安全组规则界面，在 <code>入方向</code> 下 单击 手动添加</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525201119434.png" style="zoom:80%; "><h6 id="4、相应信息"><a href="#4、相应信息" class="headerlink" title="4、相应信息"></a>4、相应信息</h6><p>然后进行添加创建端口，源一定选择 0.0.0.0/0，然后保存</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526122327450.png"></p><h6 id="5、添加成功"><a href="#5、添加成功" class="headerlink" title="5、添加成功"></a>5、添加成功</h6><p>最后就添加成功 端口了</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526122347123.png"></p><h5 id="五、登录"><a href="#五、登录" class="headerlink" title="五、登录"></a>五、登录</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 添加完后， 就可以访问 宝塔了，输入用户名 和 密码</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526124105671.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526123959522.png"></p><h5 id="六、安装-Linux-软件"><a href="#六、安装-Linux-软件" class="headerlink" title="六、安装 Linux 软件"></a>六、安装 Linux 软件</h5><p>进入系统后，会弹出 以下对话框，每一个人 也需不一样 ，版本也不一致，一定要安装 Nginx</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526124131640.png"></p><h5 id="七、可以自行修改信息"><a href="#七、可以自行修改信息" class="headerlink" title="七、可以自行修改信息"></a>七、可以自行修改信息</h5><p>只要没有任务的时候，才可以，也就是所有的任务下载完</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526124227838.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526124601952.png"></p><h2 id="没有备案-的服务器进行部署项目"><a href="#没有备案-的服务器进行部署项目" class="headerlink" title="没有备案 的服务器进行部署项目"></a>没有备案 的服务器进行部署项目</h2><h3 id="1、部署静态动态项目（没有后台服务器）"><a href="#1、部署静态动态项目（没有后台服务器）" class="headerlink" title="1、部署静态动态项目（没有后台服务器）"></a>1、部署静态动态项目（没有后台服务器）</h3><h4 id="第一步：准备好的-静态项目"><a href="#第一步：准备好的-静态项目" class="headerlink" title="第一步：准备好的 静态项目"></a>第一步：准备好的 <code>静态项目</code></h4><p>​        首先，已经准备好的 <code>静态项目</code> ，进行压缩，比如：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525195912709.png"></p><h4 id="第二步：在阿里云创建安全组"><a href="#第二步：在阿里云创建安全组" class="headerlink" title="第二步：在阿里云创建安全组"></a>第二步：在阿里云创建安全组</h4><h5 id="一、创建安全组"><a href="#一、创建安全组" class="headerlink" title="一、创建安全组"></a>一、创建安全组</h5><p>​    创建安全组就是 创建一个端口，然后进行放行就可以了（ 放行下面会说到 ）：</p><p>​    例如：左下侧有个 网络与安全 –&gt; 安全组</p><p>&lt;img src=”<a href="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525200735111.png&quot;style=&quot;zoom:80%">https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525200735111.png&quot;style=&quot;zoom:80%</a>; “ /&gt;</p><h5 id="二、安全组列表"><a href="#二、安全组列表" class="headerlink" title="二、安全组列表"></a>二、安全组列表</h5><p>于是进入到 安全组列表，右侧有个配置 规则点击，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525200850785.png"></p><h5 id="三、手动添加"><a href="#三、手动添加" class="headerlink" title="三、手动添加"></a>三、手动添加</h5><p>然后进入到 安全组规则界面，在 <code>入方向</code> 下 单击 手动添加</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525201119434.png" style="zoom:80%; "><h5 id="四、相应信息"><a href="#四、相应信息" class="headerlink" title="四、相应信息"></a>四、相应信息</h5><p>然后进行添加创建端口，源一定选择 0.0.0.0/0，然后保存</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525201937539.png"></p><h5 id="五、添加成功"><a href="#五、添加成功" class="headerlink" title="五、添加成功"></a>五、添加成功</h5><p>最后就添加成功 端口了</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525202116904.png"></p><h4 id="第三步：进行部署项目"><a href="#第三步：进行部署项目" class="headerlink" title="第三步：进行部署项目"></a>第三步：进行部署项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 宝塔 Linux 面板 或者 用软件也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我一般使用 宝塔Linux 面板进行操作</span></span><br></pre></td></tr></table></figure><p>​    利用 宝塔Linux面板 部署项目 一般可以 两种 部署方法，一个是 <code>添加站点</code> ，一种 在 <code>nginx 里添加 代码</code> ，在文件目录 中 上传 自己刚刚压缩的 项目    </p><p>​    但是没有备案的服务器，利用添加站点的方式 只能部署一个项目，不管是什么项目，只能添加一个站点，所以用 Nginx 多一些</p><h5 id="一、放行端口"><a href="#一、放行端口" class="headerlink" title="一、放行端口"></a>一、放行端口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 但是在这个之前 我们要做的 是，先要放行 刚刚创建的端口。</span><br></pre></td></tr></table></figure><p>选择 左侧的 <code>安全 </code> :</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203038826.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">端口是 刚刚 在阿里云上添加的 安全组 端口，描述就是介绍，然后进行放行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203314672.png"></p><p>放行完后，状态就是没有使用过这个 端口</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203454679.png"></p><h5 id="二、使用-站点进行创建项目"><a href="#二、使用-站点进行创建项目" class="headerlink" title="二、使用 站点进行创建项目"></a>二、使用 站点进行创建项目</h5><h6 id="1、添加站点"><a href="#1、添加站点" class="headerlink" title="1、添加站点"></a>1、添加站点</h6><p>选择网站 –&gt; 添加站点</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203626261.png"></p><h6 id="2、添加网站的信息"><a href="#2、添加网站的信息" class="headerlink" title="2、添加网站的信息"></a>2、添加网站的信息</h6><p>域名：公网ip + 刚刚放行的端口；备注 可以自己选择修改；根目录添加完域名后，系统会给你配置好，然后提交。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526075042264.png"></p><h6 id="3、查看是否添加成功"><a href="#3、查看是否添加成功" class="headerlink" title="3、查看是否添加成功"></a>3、查看是否添加成功</h6><p>添加完站点，查看一下是否存在，第一点 是不是出现下图 和 刚刚创建的站点文件目录</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528171020692.png"></p><h6 id="4、查看是否文件目录生成"><a href="#4、查看是否文件目录生成" class="headerlink" title="4、查看是否文件目录生成"></a>4、查看是否文件目录生成</h6><p>站点文件目录：文件–&gt; 根目录 –&gt; www –&gt; wwwroot –&gt; 刚刚创建的文件名</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526080227834.png" style="zoom:80%; "><h6 id="5、可以先把里面的内容清空，也就是删除"><a href="#5、可以先把里面的内容清空，也就是删除" class="headerlink" title="5、可以先把里面的内容清空，也就是删除"></a>5、可以先把里面的内容清空，也就是删除</h6><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526080413392.png"></p><h6 id="6、点击左上角的上传按钮。"><a href="#6、点击左上角的上传按钮。" class="headerlink" title="6、点击左上角的上传按钮。"></a>6、点击左上角的上传按钮。</h6><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526080517984.png" alt="image-20200526080517984" style="zoom:80%; "><h6 id="9、进行上传"><a href="#9、进行上传" class="headerlink" title="9、进行上传"></a>9、进行上传</h6><p>把之前压缩好的项目，选择文件 –&gt; 开始上传，上传完成   关闭对话框</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526080917305.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526080858913.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081016901.png"></p><h6 id="10、操作上传的项目"><a href="#10、操作上传的项目" class="headerlink" title="10、操作上传的项目"></a>10、操作上传的项目</h6><p>进行把刚刚创建的文件，进行解压，右击 –&gt; 解压。然后进入解压的文件中，把需要的文件剪切到上一级目录</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081307605.png"></p><h6 id="11、测试是否成功"><a href="#11、测试是否成功" class="headerlink" title="11、测试是否成功"></a>11、测试是否成功</h6><p>只要保证项目没有问题，那么去浏览器里 地址栏中属于 ，刚刚创建的域名加上端口；或者 侧边栏中的 网站，有个网站名，这个网站名就是 域名。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081606055.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081729743.png"></p><h5 id="三、使用-nginx-进行-创建项目部署"><a href="#三、使用-nginx-进行-创建项目部署" class="headerlink" title="三、使用 nginx 进行 创建项目部署"></a>三、使用 nginx 进行 创建项目部署</h5><p>放行完端口后，我们需要自行创建文件夹，还有配置 nginx ，那么我们先创建文件夹</p><p>如果从添加站点的 小伙伴们，那么我先把 添加站点 禁用，因为我现在用的统一端口</p><h6 id="1、上传项目"><a href="#1、上传项目" class="headerlink" title="1、上传项目"></a>1、上传项目</h6><p>在左侧 选择 文件 –&gt; 根目录 –&gt; www –&gt; wwwroot, 如果之前压缩的项目是一个文件夹，那么直接上传，如果不是，就可以新建。</p><p>我现在上传一个 com.yongle.www</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526082453139.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526083335378.png"></p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526085958837.png" alt="image-20200526085958837" style="zoom:80%; "><h6 id="2、查看是否有-Nginx"><a href="#2、查看是否有-Nginx" class="headerlink" title="2、查看是否有 Nginx"></a>2、查看是否有 Nginx</h6><p>打开左侧 首页 –&gt; 下方有个 软件面板 ，是否有个Nginx .</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526090059900.png" alt style="zoom:80%; "><h6 id="3、Nginx-不在-软件面板中"><a href="#3、Nginx-不在-软件面板中" class="headerlink" title="3、Nginx 不在 软件面板中"></a>3、Nginx 不在 软件面板中</h6><p>如果不存在，在软件商店  –&gt; 搜索栏中输入 nginx 点击搜索，应用分类选择 全部 ，找到Nginx ，在首页中显示，这样打开 首页 –&gt; 软件面板 有 Nginx 了。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090336061.png"></p><h6 id="4、配置-Nginx"><a href="#4、配置-Nginx" class="headerlink" title="4、配置 Nginx"></a>4、配置 Nginx</h6><p>点击一下 Nginx  图标、小箭头、文字 都可以。弹出 Nginx 管理 面板，选择 配置修改 右侧滚动条 到最低 或者相应的位置即可</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090726793.png"></p><h6 id="5、配置相应的信息"><a href="#5、配置相应的信息" class="headerlink" title="5、配置相应的信息"></a>5、配置相应的信息</h6><p>复制一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># yongle 静态项目</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    listen 3335; # 端口名称</span><br><span class="line">    server_name ~~~~~~~; # 自己的域名，公网ip 比如：39.961.326.18 这个是我吓唬写的</span><br><span class="line">    root /www/wwwroot/com.yongle.www; # 这个是文件的地址</span><br><span class="line">    index index.html; # 这个是首先访问的 文件，一般都是 根目录的 index.html</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要在一下代码的上面 就行 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">include /www/server/panel/vhost/nginx/*.conf;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h6 id="6、测试是否成功"><a href="#6、测试是否成功" class="headerlink" title="6、测试是否成功"></a>6、测试是否成功</h6><p>只要保证项目没有问题，那么去浏览器里 地址栏中属于 ，刚刚创建的域名加上端口；或者 侧边栏中的 网站，有个网站名，这个网站名就是 域名。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081606055.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081729743.png"></p><h3 id="2、部署前端后端后台项目（需要接口）"><a href="#2、部署前端后端后台项目（需要接口）" class="headerlink" title="2、部署前端后端后台项目（需要接口）"></a>2、部署前端后端后台项目（需要接口）</h3><h4 id="第一步：准备好的-前端后端后台项目"><a href="#第一步：准备好的-前端后端后台项目" class="headerlink" title="第一步：准备好的 前端后端后台项目"></a>第一步：准备好的 <code>前端后端后台项目</code></h4><p>​        首先，已经准备好的 前端后端后台项目，进行压缩，压缩之前一定要 弄好自己的端口 </p><p>比如 我现在的 服务器 端口 是 3336，前端接口进行连接 也是 3336 </p><p>我现在测试 后台是 nodejs</p><p>IP 最好是 0.0.0.0  最好不要是 自己的域名，和公网IP ，自己测试一下，会不会报错，我就用域名和 公网IP 报错</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526101016502.png"></p><p>前端 后台管理系统</p><p>打马赛克的 是自己 的服务器的 公网IP  + 自己的端口。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526100328658.png"></p><p>前端 前端页面</p><p>打马赛克的 是自己 的服务器的 公网IP  + 自己的端口。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526100328658.png"></p><p>我的前端 是 vue 进行打包 <code>npm run build    </code><br>打马赛克的 是自己 的服务器的 公网IP  + 自己的端口。</p><p>于是进行压缩项目，比如：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526101222555.png"></p><h4 id="第二步：在阿里云创建安全组-1"><a href="#第二步：在阿里云创建安全组-1" class="headerlink" title="第二步：在阿里云创建安全组"></a>第二步：在阿里云创建安全组</h4><h5 id="一、创建安全组-1"><a href="#一、创建安全组-1" class="headerlink" title="一、创建安全组"></a>一、创建安全组</h5><p>​    创建安全组就是 创建一个端口，然后进行放行就可以了（ 放行下面会说到 ）：</p><p>​    例如：左下侧有个 网络与安全 –&gt; 安全组</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525200735111.png" alt style="zoom:80%; "><h5 id="二、安全组列表-1"><a href="#二、安全组列表-1" class="headerlink" title="二、安全组列表"></a>二、安全组列表</h5><p>于是进入到 安全组列表，右侧有个配置 规则点击，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525200850785.png"></p><h5 id="三、手动添加-1"><a href="#三、手动添加-1" class="headerlink" title="三、手动添加"></a>三、手动添加</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 现在需要三个 端口，一个是后台 端口 <span class="number">3336</span>，一个是 前端 页面 端口 <span class="number">3337</span> 一个是 前端管理系统 端口 <span class="number">3338</span></span><br></pre></td></tr></table></figure><p>然后进入到 安全组规则界面，在 <code>入方向</code> 下 单击 手动添加</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525201119434.png" alt style="zoom:80%; "><h5 id="四、相应信息-1"><a href="#四、相应信息-1" class="headerlink" title="四、相应信息"></a>四、相应信息</h5><p>然后进行添加创建端口，源一定选择 0.0.0.0/0，然后保存</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102125239.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102050350.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102227471.png"></p><h5 id="五、添加成功-1"><a href="#五、添加成功-1" class="headerlink" title="五、添加成功"></a>五、添加成功</h5><p>最后就添加成功 端口了</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102244954.png"></p><h4 id="第三步：进行部署项目-1"><a href="#第三步：进行部署项目-1" class="headerlink" title="第三步：进行部署项目"></a>第三步：进行部署项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 宝塔 Linux 面板 或者 用软件也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我一般使用 宝塔Linux 面板进行操作</span></span><br></pre></td></tr></table></figure><p>​    利用 宝塔Linux面板 部署项目 一般可以 两种 部署方法，一个是 <code>添加站点</code> ，一种 在 <code>nginx 里添加 代码</code> ，在文件目录 中 上传 自己刚刚压缩的 项目    </p><p>​    但是没有备案的服务器，利用添加站点的方式 只能部署一个项目，不管是什么项目，只能添加一个站点，所以用 Nginx 多一些</p><h5 id="一、放行端口-1"><a href="#一、放行端口-1" class="headerlink" title="一、放行端口"></a>一、放行端口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 但是在这个之前 我们要做的 是，先要放行 刚刚创建的端口。</span><br></pre></td></tr></table></figure><p>选择 左侧的 <code>安全 </code> :</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203038826.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">端口是 刚刚 在阿里云上添加的 安全组 端口，描述就是介绍，然后进行放行 3336、3337、3338</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102808800.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102842110.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102911552.png"></p><p>放行完后，状态就是没有使用过这个 端口</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102952235.png"></p><h5 id="二、使用-nginx-进行-创建项目部署"><a href="#二、使用-nginx-进行-创建项目部署" class="headerlink" title="二、使用 nginx 进行 创建项目部署"></a>二、使用 nginx 进行 创建项目部署</h5><p>放行完端口后，我们需要自行创建文件夹，还有配置 nginx ，那么我们先创建文件夹</p><h6 id="1、上传项目-1"><a href="#1、上传项目-1" class="headerlink" title="1、上传项目"></a>1、上传项目</h6><p>在左侧 选择 文件 –&gt; 根目录 –&gt; www –&gt; wwwroot, 如果之前压缩的项目是一个文件夹，那么直接上传，如果不是，就可以新建。</p><p>我现在把刚刚 压缩的三个文件进行上传   mh5_bl_dist、mh5_bl_api_serve、mh5_bl_manage_system_dist，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526082453139.png"></p><p>于是 进行解压</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526103858989.png"></p><h6 id="2、创建数据库"><a href="#2、创建数据库" class="headerlink" title="2、创建数据库"></a>2、创建数据库</h6><p>如果用的是 本地数据库，那么进行 创建数据库，</p><p>添加数据库之前 最后修改一下 root 密码, 可以不修改，没有关系的。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104232055.png"></p><p>点击 添加数据库，输入相应的信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 这个用户名 和 密码  一定要和连接数据库的 用户名 和 密码一致</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104424752.png"></p><p>因为我用的 nodejs ，每一个后台 都不一致</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104557173.png"></p><p>添加完后，进行 导入</p><p>1、导入</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104908536.png"></p><p>2、从本地上传</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104737181.png"></p><p>3、选择文件上传</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104849527.png"></p><p>4、查看</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104835263.png"></p><h6 id="3、查看是否有-Nginx"><a href="#3、查看是否有-Nginx" class="headerlink" title="3、查看是否有 Nginx"></a>3、查看是否有 Nginx</h6><p>打开左侧 首页 –&gt; 下方有个 软件面板 ，是否有个Nginx .</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526090059900.png" alt style="zoom:80%; "><h6 id="4、Nginx-不在-软件面板中"><a href="#4、Nginx-不在-软件面板中" class="headerlink" title="4、Nginx 不在 软件面板中"></a>4、Nginx 不在 软件面板中</h6><p>如果不存在，在软件商店  –&gt; 搜索栏中输入 nginx 点击搜索，应用分类选择 全部 ，找到Nginx ，在首页中显示，这样打开 首页 –&gt; 软件面板 有 Nginx 了。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090336061.png"></p><h6 id="5、配置-Nginx"><a href="#5、配置-Nginx" class="headerlink" title="5、配置 Nginx"></a>5、配置 Nginx</h6><p>点击一下 Nginx  图标、小箭头、文字 都可以。弹出 Nginx 管理 面板，选择 配置修改 右侧滚动条 到最低 或者相应的位置即可</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090726793.png"></p><h6 id="6、配置相应的信息"><a href="#6、配置相应的信息" class="headerlink" title="6、配置相应的信息"></a>6、配置相应的信息</h6><p>复制一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># h5 BL 前端页面</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    listen 3337; # 端口名称</span><br><span class="line">    server_name ~~~~~~~; # 自己的域名，公网ip 比如：39.961.326.18 这个是我吓唬写的</span><br><span class="line">    root /www/wwwroot/mh5_bl_dist; # 这个是文件的地址</span><br><span class="line">    index index.html; # 这个是首先访问的 文件，一般都是 根目录的 index.html</span><br><span class="line">    location /api/ &#123; # 配置 需要连接的 后台服务器，明确一点，可有可无</span><br><span class="line">            proxy_pass http:<span class="comment">//~~~~~~~:3336;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># h5 BL 前端后台管理系统</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    listen 3338; # 端口名称</span><br><span class="line">    server_name ~~~~~~~; # 自己的域名，公网ip 比如：39.961.326.18 这个是我吓唬写的</span><br><span class="line">    root /www/wwwroot/mh5_bl_manage_system_dist; # 这个是文件的地址</span><br><span class="line">    index index.html; # 这个是首先访问的 文件，一般都是 根目录的 index.html</span><br><span class="line">    location /api/ &#123; # 配置 需要连接的服务器，明确一点，可有可无</span><br><span class="line">            proxy_pass http:<span class="comment">//~~~~~~~:3336;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要在一下代码的上面 就行 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">include /www/server/panel/vhost/nginx/*.conf;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">小朋友是否有很多问号，为什么只 配置 前端页面 和 前端后台管理系统 ，没有配置 后台服务器 只需要 利用 nodejs 或者 PM2 进行启动就可以了，但是端口一定要放行哦。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h6 id="7、安装-PM2"><a href="#7、安装-PM2" class="headerlink" title="7、安装 PM2"></a>7、安装 PM2</h6><p>为啥我只安装 PM2  没有安装  node 呢？ 因为 PM2 比 node 好用，因为项目报错 PM2 并不会终断 后台运行，而node 就不行</p><p>在 左侧菜单栏中 选择 软件商店 ，在输入栏中 输入 PM2 进行搜索，选择全部 ，安装PM2  安装完成 ，选择 在首页 显示</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526105836607.png"></p><h6 id="8、利用-PM2-启动项目"><a href="#8、利用-PM2-启动项目" class="headerlink" title="8、利用 PM2 启动项目"></a>8、利用 PM2 启动项目</h6><p>点击一下 PM2 图标、小箭头、文字 都可以。弹出  PM2 管理器 面板</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110226893.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110358430.png"></p><p>选择 服务器的目录，和输入 启动文件，介绍项目名称，项目名称不能为中文</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110609005.png"></p><p>查看是否添加成功</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110648557.png"></p><h6 id="9、利用-PM2-好出现一种错误"><a href="#9、利用-PM2-好出现一种错误" class="headerlink" title="9、利用 PM2 好出现一种错误"></a>9、利用 PM2 好出现一种错误</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个端口 和 我服务器上的端口一致，所以前端连接的时候，会报错，请求不到接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况一定要 使用软件 进行启动 PM2， 启动完后，在宝塔 上也可以 看见，先不删除，在创建一个，这样端口就一致了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 PM2 启动项目  https://www.cnblogs.com/czq-0214/p/10007809.html</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110922515.png" alt="image-20200526110922515"></p><p>找到相应的 文件目录，利用 PM2 启动</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526113120306.png" alt="image-20200526113120306"></p><h6 id="10、测试是否成功"><a href="#10、测试是否成功" class="headerlink" title="10、测试是否成功"></a>10、测试是否成功</h6><p>只要保证项目没有问题，那么去浏览器里 地址栏中属于 ，刚刚创建的域名加上端口；或者 侧边栏中的 网站，有个网站名，这个网站名就是 域名。</p><p>前端页面 ：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526113416131.png" alt="image-20200526113416131"></p><p>管理系统：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526113431219.png" alt="image-20200526113431219"></p><h2 id="备案-好的服务器进行部署项目"><a href="#备案-好的服务器进行部署项目" class="headerlink" title="备案 好的服务器进行部署项目"></a>备案 好的服务器进行部署项目</h2><p>可以根据域名进行部署项目，没有 备案的服务器 只能使用公网 IP 才可以 部署，现在可以用 域名进行部署</p><h3 id="1、解析域名"><a href="#1、解析域名" class="headerlink" title="1、解析域名"></a>1、解析域名</h3><p>解析 域名的主要原因是，让这个域名根据自己 公网IP 进行访问</p><p>打开阿里云里搜索 域名，打开相应的位置。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528165127667.png" alt="image-20200528165127667"></p><h4 id="第一步：解析"><a href="#第一步：解析" class="headerlink" title="第一步：解析"></a>第一步：解析</h4><p>找到相应的 域名，右侧 点击 解析，进行界面。</p><h4 id="第二步：添加二级域名"><a href="#第二步：添加二级域名" class="headerlink" title="第二步：添加二级域名"></a>第二步：添加二级域名</h4><p>可以不用添加二级域名，一级域名默认访问的时候，不需要有二级域名的。看自己是否需要，我现在用二级域名。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528165430172.png" alt="image-20200528165430172"></p><p>点击添加记录，弹出相应的对话框，填写相应的信息。</p><p>第一个是 主机记录：前面是添加的是 二级域名，比如 <a href="http://www.baidu.com,www/">www.baidu.com，www</a> 就是二级域名</p><p>第二个是 记录值：是自己的服务器  公网IP .</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528165728131.png" alt="image-20200528165728131"></p><h4 id="第三步：查看二级域名"><a href="#第三步：查看二级域名" class="headerlink" title="第三步：查看二级域名"></a>第三步：查看二级域名</h4><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528165811082.png" alt="image-20200528165811082"></p><h3 id="2、部署静态动态项目（没有后台服务器）"><a href="#2、部署静态动态项目（没有后台服务器）" class="headerlink" title="2、部署静态动态项目（没有后台服务器）"></a>2、部署静态动态项目（没有后台服务器）</h3><h4 id="第一步：准备好的-静态项目-1"><a href="#第一步：准备好的-静态项目-1" class="headerlink" title="第一步：准备好的 静态项目"></a>第一步：准备好的 <code>静态项目</code></h4><p>​        首先，已经准备好的 <code>静态项目</code> ，进行压缩，比如：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525195912709.png" alt="image-20200525195912709"></p><h4 id="第二步：在阿里云创建安全组-2"><a href="#第二步：在阿里云创建安全组-2" class="headerlink" title="第二步：在阿里云创建安全组"></a>第二步：在阿里云创建安全组</h4><p>用域名的话，可以不用 安全组 也就是端口，可以用80 端口，但是这个端口只能部署一个项目，所以创建端口比较好点。</p><p>用端口的话就会让用户访问的时候 麻烦。取决于自己怎么用</p><h5 id="一、创建安全组-2"><a href="#一、创建安全组-2" class="headerlink" title="一、创建安全组"></a>一、创建安全组</h5><p>​    创建安全组就是 创建一个端口，然后进行放行就可以了（ 放行下面会说到 ）：</p><p>​    例如：左下侧有个 网络与安全 –&gt; 安全组</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525200735111.png" alt="image-20200525200735111" style="zoom:80%; "><h5 id="二、安全组列表-2"><a href="#二、安全组列表-2" class="headerlink" title="二、安全组列表"></a>二、安全组列表</h5><p>于是进入到 安全组列表，右侧有个配置 规则点击，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525200850785.png" alt="image-20200525200850785"></p><h5 id="三、手动添加-2"><a href="#三、手动添加-2" class="headerlink" title="三、手动添加"></a>三、手动添加</h5><p>然后进入到 安全组规则界面，在 <code>入方向</code> 下 单击 手动添加</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525201119434.png" alt="image-20200525201119434" style="zoom:80%; "><h5 id="四、相应信息-2"><a href="#四、相应信息-2" class="headerlink" title="四、相应信息"></a>四、相应信息</h5><p>然后进行添加创建端口，源一定选择 0.0.0.0/0，然后保存</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525201937539.png" alt="image-20200525201937539"></p><h5 id="五、添加成功-2"><a href="#五、添加成功-2" class="headerlink" title="五、添加成功"></a>五、添加成功</h5><p>最后就添加成功 端口了</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525202116904.png" alt="image-20200525202116904"></p><h4 id="第三步：进行部署项目-2"><a href="#第三步：进行部署项目-2" class="headerlink" title="第三步：进行部署项目"></a>第三步：进行部署项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 宝塔 Linux 面板 或者 用软件也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我一般使用 宝塔Linux 面板进行操作</span></span><br></pre></td></tr></table></figure><p>​    利用 宝塔Linux面板 部署项目 一般可以 两种 部署方法，一个是 <code>添加站点</code> ，一种 在 <code>nginx 里添加 代码</code> ，在文件目录 中 上传 自己刚刚压缩的 项目    </p><p>​    但是没有备案的服务器，利用添加站点的方式 只能部署一个项目，不管是什么项目，只能添加一个站点，所以用 Nginx 多一些</p><h5 id="一、放行端口-2"><a href="#一、放行端口-2" class="headerlink" title="一、放行端口"></a>一、放行端口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ 但是在这个之前 我们要做的 是，先要放行 刚刚创建的端口。</span><br><span class="line"></span><br><span class="line">使用域名的话，可以不用放行端口，如果不成功的话，就可以先放行一下端口，试一试。</span><br></pre></td></tr></table></figure><p>选择 左侧的 <code>安全 </code> :</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203038826.png" alt="image-20200525203038826"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">端口是 刚刚 在阿里云上添加的 安全组 端口，描述就是介绍，然后进行放行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203314672.png" alt="image-20200525203314672"></p><p>放行完后，状态就是没有使用过这个 端口</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203454679.png" alt="image-20200525203454679"></p><h5 id="二、使用-站点进行创建项目-1"><a href="#二、使用-站点进行创建项目-1" class="headerlink" title="二、使用 站点进行创建项目"></a>二、使用 站点进行创建项目</h5><h6 id="1、添加站点-1"><a href="#1、添加站点-1" class="headerlink" title="1、添加站点"></a>1、添加站点</h6><p>选择网站 –&gt; 添加站点</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203626261.png" alt="image-20200525203626261"></p><h6 id="2、添加网站的信息-1"><a href="#2、添加网站的信息-1" class="headerlink" title="2、添加网站的信息"></a>2、添加网站的信息</h6><p>域名：使用自己的域名 + 刚刚放行的端口；备注 可以自己选择修改；根目录添加完域名后，系统会给你配置好，然后提交。</p><p>如果自己的端口是 80 就可以不用写 端口。直接就是 自己的域名。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528170901667.png" alt="image-20200528170901667"></p><h6 id="3、查看是否添加成功-1"><a href="#3、查看是否添加成功-1" class="headerlink" title="3、查看是否添加成功"></a>3、查看是否添加成功</h6><p>添加完站点，查看一下是否存在，第一点 是不是出现下图 和 刚刚创建的站点文件目录</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528171007391.png" alt="image-20200528171007391"></p><h6 id="4、查看是否文件目录生成-1"><a href="#4、查看是否文件目录生成-1" class="headerlink" title="4、查看是否文件目录生成"></a>4、查看是否文件目录生成</h6><p>站点文件目录：文件–&gt; 根目录 –&gt; www –&gt; wwwroot –&gt; 刚刚创建的文件名</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526080227834.png" alt="image-20200526080227834" style="zoom:80%; "><h6 id="5、可以先把里面的内容清空，也就是删除-1"><a href="#5、可以先把里面的内容清空，也就是删除-1" class="headerlink" title="5、可以先把里面的内容清空，也就是删除"></a>5、可以先把里面的内容清空，也就是删除</h6><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526080413392.png" alt="image-20200526080413392"></p><h6 id="6、点击左上角的上传按钮。-1"><a href="#6、点击左上角的上传按钮。-1" class="headerlink" title="6、点击左上角的上传按钮。"></a>6、点击左上角的上传按钮。</h6><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526080517984.png" alt="image-20200526080517984" style="zoom:80%; "><h6 id="9、进行上传-1"><a href="#9、进行上传-1" class="headerlink" title="9、进行上传"></a>9、进行上传</h6><p>把之前压缩好的项目，选择文件 –&gt; 开始上传，上传完成   关闭对话框</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526080917305.png" alt="image-20200526080917305"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526080858913.png" alt="image-20200526080858913"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081016901.png" alt="image-20200526081016901"></p><h6 id="10、操作上传的项目-1"><a href="#10、操作上传的项目-1" class="headerlink" title="10、操作上传的项目"></a>10、操作上传的项目</h6><p>进行把刚刚创建的文件，进行解压，右击 –&gt; 解压。然后进入解压的文件中，把需要的文件剪切到上一级目录</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081307605.png" alt="image-20200526081307605"></p><h6 id="11、测试是否成功-1"><a href="#11、测试是否成功-1" class="headerlink" title="11、测试是否成功"></a>11、测试是否成功</h6><p>只要保证项目没有问题，那么去浏览器里 地址栏中属于 ，刚刚创建的域名加上端口；或者 侧边栏中的 网站，有个网站名，这个网站名就是 域名。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081606055.png" alt="image-20200526081606055"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081729743.png" alt="image-20200526081729743"></p><h5 id="三、使用-nginx-进行-创建项目部署-1"><a href="#三、使用-nginx-进行-创建项目部署-1" class="headerlink" title="三、使用 nginx 进行 创建项目部署"></a>三、使用 nginx 进行 创建项目部署</h5><p>放行完端口后，我们需要自行创建文件夹，还有配置 nginx ，那么我们先创建文件夹</p><p>如果从添加站点的 小伙伴们，那么我先把 添加站点 禁用，因为我现在用的统一端口</p><h6 id="1、上传项目-2"><a href="#1、上传项目-2" class="headerlink" title="1、上传项目"></a>1、上传项目</h6><p>在左侧 选择 文件 –&gt; 根目录 –&gt; www –&gt; wwwroot, 如果之前压缩的项目是一个文件夹，那么直接上传，如果不是，就可以新建。</p><p>我现在上传一个 com.yongle.www</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526082453139.png" alt="image-20200526082453139"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526083335378.png" alt="image-20200526083335378"></p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526085958837.png" alt="image-20200526085958837" style="zoom:80%; "><h6 id="2、查看是否有-Nginx-1"><a href="#2、查看是否有-Nginx-1" class="headerlink" title="2、查看是否有 Nginx"></a>2、查看是否有 Nginx</h6><p>打开左侧 首页 –&gt; 下方有个 软件面板 ，是否有个Nginx .</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526090059900.png" alt="image-20200526090059900" style="zoom:80%; "><h6 id="3、Nginx-不在-软件面板中-1"><a href="#3、Nginx-不在-软件面板中-1" class="headerlink" title="3、Nginx 不在 软件面板中"></a>3、Nginx 不在 软件面板中</h6><p>如果不存在，在软件商店  –&gt; 搜索栏中输入 nginx 点击搜索，应用分类选择 全部 ，找到Nginx ，在首页中显示，这样打开 首页 –&gt; 软件面板 有 Nginx 了。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090336061.png" alt="image-20200526090336061"></p><h6 id="4、配置-Nginx-1"><a href="#4、配置-Nginx-1" class="headerlink" title="4、配置 Nginx"></a>4、配置 Nginx</h6><p>点击一下 Nginx  图标、小箭头、文字 都可以。弹出 Nginx 管理 面板，选择 配置修改 右侧滚动条 到最低 或者相应的位置即可</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090726793.png" alt="image-20200526090726793"></p><h6 id="5、配置相应的信息-1"><a href="#5、配置相应的信息-1" class="headerlink" title="5、配置相应的信息"></a>5、配置相应的信息</h6><p>复制一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># yongle 静态项目</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    listen 3335; # 端口名称  使用域名 可以写80端口，也可以写自己创建的端口</span><br><span class="line">    server_name ~~~~~~~; # 自己的域名， 比如：bl.chenmsj.com 这个是我吓唬写的</span><br><span class="line">    root /www/wwwroot/com.yongle.www; # 这个是文件的地址</span><br><span class="line">    index index.html; # 这个是首先访问的 文件，一般都是 根目录的 index.html</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要在一下代码的上面 就行 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">include /www/server/panel/vhost/nginx/*.conf;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h6 id="6、测试是否成功-1"><a href="#6、测试是否成功-1" class="headerlink" title="6、测试是否成功"></a>6、测试是否成功</h6><p>只要保证项目没有问题，那么去浏览器里 地址栏中属于 ，刚刚创建的域名加上端口；或者 侧边栏中的 网站，有个网站名，这个网站名就是 域名。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081606055.png" alt="image-20200526081606055"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526081729743.png" alt="image-20200526081729743"></p><h3 id="3、部署前端后端后台项目（需要接口）"><a href="#3、部署前端后端后台项目（需要接口）" class="headerlink" title="3、部署前端后端后台项目（需要接口）"></a>3、部署前端后端后台项目（需要接口）</h3><h4 id="第一步：准备好的-前端后端后台项目-1"><a href="#第一步：准备好的-前端后端后台项目-1" class="headerlink" title="第一步：准备好的 前端后端后台项目"></a>第一步：准备好的 <code>前端后端后台项目</code></h4><p>​        首先，已经准备好的 前端后端后台项目，进行压缩，压缩之前一定要 弄好自己的端口 </p><p>比如 我现在的 服务器 端口 是 3336，前端接口进行连接 也是 3336 </p><p>我现在测试 后台是 nodejs </p><p>IP 最好是 0.0.0.0  最好不要是 自己的域名，和公网IP ，自己测试一下，会不会报错，我就用域名和 公网IP 报错</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526101016502.png" alt="image-20200526101016502"></p><p>前端 后台管理系统 </p><p>打马赛克的 是自己 的 域名 + 自己的端口。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526100328658.png" alt="image-20200526100328658"></p><p>前端 前端页面</p><p>打马赛克的 是自己 的 域名 + 自己的端口。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526100328658.png" alt="image-20200526100328658"></p><p>我的前端 是 vue 进行打包 <code>npm run build    </code><br>打马赛克的 是自己 的 域名。</p><p>于是进行压缩项目，比如：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526101222555.png" alt="image-20200526101222555"></p><h4 id="第二步：在阿里云创建安全组-3"><a href="#第二步：在阿里云创建安全组-3" class="headerlink" title="第二步：在阿里云创建安全组"></a>第二步：在阿里云创建安全组</h4><p>用域名的话，可以不用 安全组 也就是端口，可以用80 端口，但是这个端口只能部署一个项目，所以创建端口比较好点。</p><p>用端口的话就会让用户访问的时候 麻烦。取决于自己怎么用</p><p>可以前端页面使用 80 端口，后台服务器创建一个端口 3336，前端后台管理系统 端口 3338</p><h5 id="一、创建安全组-3"><a href="#一、创建安全组-3" class="headerlink" title="一、创建安全组"></a>一、创建安全组</h5><p>​    创建安全组就是 创建一个端口，然后进行放行就可以了（ 放行下面会说到 ）：</p><p>​    例如：左下侧有个 网络与安全 –&gt; 安全组</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525200735111.png" alt="image-20200525200735111" style="zoom:80%; "><h5 id="二、安全组列表-3"><a href="#二、安全组列表-3" class="headerlink" title="二、安全组列表"></a>二、安全组列表</h5><p>于是进入到 安全组列表，右侧有个配置 规则点击，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525200850785.png" alt="image-20200525200850785"></p><h5 id="三、手动添加-3"><a href="#三、手动添加-3" class="headerlink" title="三、手动添加"></a>三、手动添加</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 现在需要三个 端口，一个是后台 端口 <span class="number">3336</span>，一个是 前端 页面 端口 <span class="number">80</span>， 一个是 前端管理系统 端口 <span class="number">3338</span></span><br></pre></td></tr></table></figure><p>然后进入到 安全组规则界面，在 <code>入方向</code> 下 单击 手动添加</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200525201119434.png" alt="image-20200525201119434" style="zoom:80%; "><h5 id="四、相应信息-3"><a href="#四、相应信息-3" class="headerlink" title="四、相应信息"></a>四、相应信息</h5><p>然后进行添加创建端口，源一定选择 0.0.0.0/0，然后保存</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102125239.png" alt="image-20200526102125239"></p><p>前端页面的端口 为 80 ，就无需添加了，如果用的不是 80 端口，自己添加一下端口。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102227471.png" alt="image-20200526102227471"></p><h5 id="五、添加成功-3"><a href="#五、添加成功-3" class="headerlink" title="五、添加成功"></a>五、添加成功</h5><p>最后就添加成功 端口了</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528172633396.png"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528172620895.png" alt="image-20200528172620895"></p><h4 id="第三步：进行部署项目-3"><a href="#第三步：进行部署项目-3" class="headerlink" title="第三步：进行部署项目"></a>第三步：进行部署项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 宝塔 Linux 面板 或者 用软件也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我一般使用 宝塔Linux 面板进行操作</span></span><br></pre></td></tr></table></figure><p>​    利用 宝塔Linux面板 部署项目 一般可以 两种 部署方法，一个是 <code>添加站点</code> ，一种 在 <code>nginx 里添加 代码</code> ，在文件目录 中 上传 自己刚刚压缩的 项目    </p><p>​    但是没有备案的服务器，利用添加站点的方式 只能部署一个项目，不管是什么项目，只能添加一个站点，所以用 Nginx 多一些</p><h5 id="一、放行端口-3"><a href="#一、放行端口-3" class="headerlink" title="一、放行端口"></a>一、放行端口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ 但是在这个之前 我们要做的 是，先要放行 刚刚创建的端口。</span><br><span class="line"></span><br><span class="line">使用域名的话，可以不用放行端口，如果不成功的话，就可以先放行一下端口，试一试。</span><br></pre></td></tr></table></figure><p>选择 左侧的 <code>安全 </code> :</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200525203038826.png" alt="image-20200525203038826"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">端口是 刚刚 在阿里云上添加的 安全组 端口，描述就是介绍，然后进行放行 3336、3337、3338</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102808800.png" alt="image-20200526102808800"></p><p>前端页面的 80端口可以不用放行，因为默认放行了</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526102911552.png" alt="image-20200526102911552"></p><p>放行完后，状态就是没有使用过这个 端口</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528172743024.png" alt="image-20200528172743024"><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528172753008.png" alt="image-20200528172753008"></p><h5 id="二、使用-nginx-进行-创建项目部署-1"><a href="#二、使用-nginx-进行-创建项目部署-1" class="headerlink" title="二、使用 nginx 进行 创建项目部署"></a>二、使用 nginx 进行 创建项目部署</h5><p>放行完端口后，我们需要自行创建文件夹，还有配置 nginx ，那么我们先创建文件夹</p><h6 id="1、上传项目-3"><a href="#1、上传项目-3" class="headerlink" title="1、上传项目"></a>1、上传项目</h6><p>在左侧 选择 文件 –&gt; 根目录 –&gt; www –&gt; wwwroot, 如果之前压缩的项目是一个文件夹，那么直接上传，如果不是，就可以新建。</p><p>我现在把刚刚 压缩的三个文件进行上传，放入到 一个 bl 的文件夹里，好管理：   mh5_bl_dist、mh5_bl_api_serve、mh5_bl_manage_system_dist，</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200528172928406.png" alt="image-20200528172928406"></p><p>于是 进行解压</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526103858989.png" alt="image-20200526103858989"></p><h6 id="2、创建数据库-1"><a href="#2、创建数据库-1" class="headerlink" title="2、创建数据库"></a>2、创建数据库</h6><p>如果用的是 本地数据库，那么进行 创建数据库，</p><p>添加数据库之前 最后修改一下 root 密码, 可以不修改，没有关系的。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104232055.png" alt="image-20200526104232055"></p><p>点击 添加数据库，输入相应的信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ 这个用户名 和 密码  一定要和连接数据库的 用户名 和 密码一致</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104424752.png" alt="image-20200526104424752"></p><p>因为我用的 nodejs ，每一个后台 都不一致</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104557173.png" alt="image-20200526104557173"></p><p>添加完后，进行 导入</p><p>1、导入</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104908536.png" alt="image-20200526104908536"></p><p>2、从本地上传</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104737181.png" alt="image-20200526104737181"></p><p>3、选择文件上传</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104849527.png" alt="image-20200526104849527"></p><p>4、查看</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526104835263.png" alt="image-20200526104835263"></p><h6 id="3、查看是否有-Nginx-1"><a href="#3、查看是否有-Nginx-1" class="headerlink" title="3、查看是否有 Nginx"></a>3、查看是否有 Nginx</h6><p>打开左侧 首页 –&gt; 下方有个 软件面板 ，是否有个Nginx .</p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/部署项目/image-20200526090059900.png" alt="image-20200526090059900" style="zoom:80%; "><h6 id="4、Nginx-不在-软件面板中-1"><a href="#4、Nginx-不在-软件面板中-1" class="headerlink" title="4、Nginx 不在 软件面板中"></a>4、Nginx 不在 软件面板中</h6><p>如果不存在，在软件商店  –&gt; 搜索栏中输入 nginx 点击搜索，应用分类选择 全部 ，找到Nginx ，在首页中显示，这样打开 首页 –&gt; 软件面板 有 Nginx 了。</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090336061.png" alt="image-20200526090336061"></p><h6 id="5、配置-Nginx-1"><a href="#5、配置-Nginx-1" class="headerlink" title="5、配置 Nginx"></a>5、配置 Nginx</h6><p>点击一下 Nginx  图标、小箭头、文字 都可以。弹出 Nginx 管理 面板，选择 配置修改 右侧滚动条 到最低 或者相应的位置即可</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526090726793.png" alt="image-20200526090726793"></p><h6 id="6、配置相应的信息-1"><a href="#6、配置相应的信息-1" class="headerlink" title="6、配置相应的信息"></a>6、配置相应的信息</h6><p>复制一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># h5 BL 前端页面</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    listen 80; # 端口名称</span><br><span class="line">    server_name ~~~~~~~; # 自己的域名，  比如：bl.chenmsj.com 这个是我吓唬写的</span><br><span class="line">    root /www/wwwroot/mh5_bl_dist; # 这个是文件的地址</span><br><span class="line">    index index.html; # 这个是首先访问的 文件，一般都是 根目录的 index.html</span><br><span class="line">    location /api/ &#123; # 配置 需要连接的 后台服务器，明确一点，可有可无</span><br><span class="line">            proxy_pass http:<span class="comment">//~~~~~~~:3336;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># h5 BL 前端后台管理系统</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    listen 3338; # 端口名称</span><br><span class="line">    server_name ~~~~~~~; # 自己的域名，  比如：bl.chenmsj.com  这个是我吓唬写的</span><br><span class="line">    root /www/wwwroot/mh5_bl_manage_system_dist; # 这个是文件的地址</span><br><span class="line">    index index.html; # 这个是首先访问的 文件，一般都是 根目录的 index.html</span><br><span class="line">    location /api/ &#123; # 配置 需要连接的服务器，明确一点，可有可无</span><br><span class="line">            proxy_pass http:<span class="comment">//~~~~~~~:3336;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要在一下代码的上面 就行 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">include /www/server/panel/vhost/nginx/*.conf;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">小朋友是否有很多问号，为什么只 配置 前端页面 和 前端后台管理系统 ，没有配置 后台服务器 只需要 利用 nodejs 或者 PM2 进行启动就可以了，但是端口一定要放行哦。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h6 id="7、安装-PM2-1"><a href="#7、安装-PM2-1" class="headerlink" title="7、安装 PM2"></a>7、安装 PM2</h6><p>为啥我只安装 PM2  没有安装  node 呢？ 因为 PM2 比 node 好用，因为项目报错 PM2 并不会终断 后台运行，而node 就不行</p><p>在 左侧菜单栏中 选择 软件商店 ，在输入栏中 输入 PM2 进行搜索，选择全部 ，安装PM2  安装完成 ，选择 在首页 显示</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526105836607.png" alt="image-20200526105836607"></p><h6 id="8、利用-PM2-启动项目-1"><a href="#8、利用-PM2-启动项目-1" class="headerlink" title="8、利用 PM2 启动项目"></a>8、利用 PM2 启动项目</h6><p>点击一下 PM2 图标、小箭头、文字 都可以。弹出  PM2 管理器 面板</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110226893.png" alt="image-20200526110226893"></p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110358430.png" alt="image-20200526110358430"></p><p>选择 服务器的目录，和输入 启动文件，介绍项目名称，项目名称不能为中文</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110609005.png" alt="image-20200526110609005"></p><p>查看是否添加成功</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110648557.png" alt="image-20200526110648557"></p><h6 id="9、利用-PM2-好出现一种错误-1"><a href="#9、利用-PM2-好出现一种错误-1" class="headerlink" title="9、利用 PM2 好出现一种错误"></a>9、利用 PM2 好出现一种错误</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个端口 和 我服务器上的端口一致，所以前端连接的时候，会报错，请求不到接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况一定要 使用软件 进行启动 PM2， 启动完后，在宝塔 上也可以 看见，先不删除，在创建一个，这样端口就一致了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 PM2 启动项目  https://www.cnblogs.com/czq-0214/p/10007809.html</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526110922515.png" alt="image-20200526110922515"></p><p>找到相应的 文件目录，利用 PM2 启动</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526113120306.png" alt="image-20200526113120306"></p><h6 id="10、测试是否成功-1"><a href="#10、测试是否成功-1" class="headerlink" title="10、测试是否成功"></a>10、测试是否成功</h6><p>只要保证项目没有问题，那么去浏览器里 地址栏中属于 ，刚刚创建的域名加上端口；或者 侧边栏中的 网站，有个网站名，这个网站名就是 域名。</p><p>前端页面 ：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526113416131.png" alt="image-20200526113416131"></p><p>管理系统：</p><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20200526113431219.png" alt="image-20200526113431219"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 部署项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置SSH</title>
      <link href="/msj_blog.io/2020/09/09/%E9%85%8D%E7%BD%AESSH/"/>
      <url>/msj_blog.io/2020/09/09/%E9%85%8D%E7%BD%AESSH/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何生成SSH公钥私钥"><a href="#如何生成SSH公钥私钥" class="headerlink" title="如何生成SSH公钥私钥?"></a>如何生成SSH公钥私钥?</h1><h3 id="1、查看是否存在-ssh、"><a href="#1、查看是否存在-ssh、" class="headerlink" title="1、查看是否存在 ssh、"></a>1、查看是否存在 ssh、</h3><h4 id="先查看在C-Users-win10文件夹下是否有一个-ssh文件夹-里面有3个文件-一般是这个地址"><a href="#先查看在C-Users-win10文件夹下是否有一个-ssh文件夹-里面有3个文件-一般是这个地址" class="headerlink" title="先查看在C:\Users\win10文件夹下是否有一个.ssh文件夹, 里面有3个文件(一般是这个地址)"></a>先查看在C:\Users\win10文件夹下是否有一个.ssh文件夹, 里面有3个文件(一般是这个地址)</h4><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%85%8D%E7%BD%AESSH/image-20200910095040000.png"></p><h4 id="如果找不到的话-可以通过以命令查看"><a href="#如果找不到的话-可以通过以命令查看" class="headerlink" title="如果找不到的话, 可以通过以命令查看"></a>如果找不到的话, 可以通过以命令查看</h4><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%85%8D%E7%BD%AESSH/image-20200910095202767.png"></p><h5 id="在弹出窗口中输入cd-ssh-然后输入ls查看秘钥列表"><a href="#在弹出窗口中输入cd-ssh-然后输入ls查看秘钥列表" class="headerlink" title="在弹出窗口中输入cd ~/.ssh, 然后输入ls查看秘钥列表"></a>在弹出窗口中输入cd ~/.ssh, 然后输入ls查看秘钥列表</h5><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%85%8D%E7%BD%AESSH/image-20200910095221341.png"></p><h2 id="2、如果没有看到id-ras-pub文件即没有配置，然后请看下面如何配置"><a href="#2、如果没有看到id-ras-pub文件即没有配置，然后请看下面如何配置" class="headerlink" title="2、如果没有看到id_ras.pub文件即没有配置，然后请看下面如何配置"></a>2、如果没有看到id_ras.pub文件即没有配置，然后请看下面如何配置</h2><h3 id="你可以按如下命令来生成-ssh-key"><a href="#你可以按如下命令来生成-ssh-key" class="headerlink" title="你可以按如下命令来生成 ssh key:"></a>你可以按如下命令来生成 ssh key:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;</span><br></pre></td></tr></table></figure><h4 id="按三次回车你就会看见这个东西-不要在意为什么生成的不一样-这里生成的中文是我自己写的"><a href="#按三次回车你就会看见这个东西-不要在意为什么生成的不一样-这里生成的中文是我自己写的" class="headerlink" title="按三次回车你就会看见这个东西(不要在意为什么生成的不一样, 这里生成的中文是我自己写的)"></a>按三次回车你就会看见这个东西(不要在意为什么生成的不一样, 这里生成的中文是我自己写的)</h4><p><img src="https://gitee.com/meishijian/pic_imgage/raw/master/%E9%85%8D%E7%BD%AESSH/image-20200910095359486.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 注意: 生成的文件名跟密码可以不填, 直接按3次回车. 填了以后使用git都要输入密码, 就显得很麻烦, 那还不如不填.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="按照提示完成三次回车，即可生成-ssh-key-通过查看-ssh-id-rsa-pub-文件内容，获取到你的ssh-key"><a href="#按照提示完成三次回车，即可生成-ssh-key-通过查看-ssh-id-rsa-pub-文件内容，获取到你的ssh-key" class="headerlink" title="按照提示完成三次回车，即可生成 ssh key. 通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的ssh key"></a>按照提示完成三次回车，即可生成 ssh key. 通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的ssh key</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 配置SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重启电脑</title>
      <link href="/msj_blog.io/2020/09/09/%E9%87%8D%E5%90%AF%E7%94%B5%E8%84%91/"/>
      <url>/msj_blog.io/2020/09/09/%E9%87%8D%E5%90%AF%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重启电脑"><a href="#重启电脑" class="headerlink" title="重启电脑"></a>重启电脑</h1><h3 id="在电脑中-新建一个-txt-文件，把下面的代码-复制粘贴-到刚刚-新建的-txt-文件中-任何一个位置都可以新建-txt-文件"><a href="#在电脑中-新建一个-txt-文件，把下面的代码-复制粘贴-到刚刚-新建的-txt-文件中-任何一个位置都可以新建-txt-文件" class="headerlink" title="在电脑中 新建一个 txt 文件，把下面的代码 复制粘贴 到刚刚 新建的 txt 文件中 ,  ( 任何一个位置都可以新建 txt 文件 )"></a>在电脑中 新建一个 txt 文件，把下面的代码 复制粘贴 到刚刚 新建的 txt 文件中 ,  ( 任何一个位置都可以新建 txt 文件 )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r -t 0</span><br></pre></td></tr></table></figure><h3 id="关闭这个-txt-文件，于是右击鼠标-–-gt-重命名-–-gt-把-“-txt-“-改为-“-bat-“"><a href="#关闭这个-txt-文件，于是右击鼠标-–-gt-重命名-–-gt-把-“-txt-“-改为-“-bat-“" class="headerlink" title="关闭这个 txt 文件，于是右击鼠标 –&gt; 重命名 –&gt; 把 “ .txt “ 改为 “ .bat “"></a>关闭这个 txt 文件，于是右击鼠标 –&gt; 重命名 –&gt; 把 “ .txt “ 改为 “ .bat “</h3><h3 id="于是双击即可"><a href="#于是双击即可" class="headerlink" title="于是双击即可"></a>于是双击即可</h3>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动关机</title>
      <link href="/msj_blog.io/2020/09/09/%E6%BB%91%E5%8A%A8%E5%85%B3%E6%9C%BA/"/>
      <url>/msj_blog.io/2020/09/09/%E6%BB%91%E5%8A%A8%E5%85%B3%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="滑动关机"><a href="#滑动关机" class="headerlink" title="滑动关机"></a>滑动关机</h1><h3 id="在电脑中-新建一个-txt-文件，把下面的代码-复制粘贴-到刚刚-新建的-txt-文件中-任何一个位置都可以新建-txt-文件"><a href="#在电脑中-新建一个-txt-文件，把下面的代码-复制粘贴-到刚刚-新建的-txt-文件中-任何一个位置都可以新建-txt-文件" class="headerlink" title="在电脑中 新建一个 txt 文件，把下面的代码 复制粘贴 到刚刚 新建的 txt 文件中 , ( 任何一个位置都可以新建 txt 文件 )"></a>在电脑中 新建一个 txt 文件，把下面的代码 复制粘贴 到刚刚 新建的 txt 文件中 , ( 任何一个位置都可以新建 txt 文件 )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slidetoshutdown</span><br></pre></td></tr></table></figure><h3 id="关闭这个-txt-文件，于是右击鼠标-–-gt-重命名-–-gt-把-“-txt-“-改为-“-bat-“"><a href="#关闭这个-txt-文件，于是右击鼠标-–-gt-重命名-–-gt-把-“-txt-“-改为-“-bat-“" class="headerlink" title="关闭这个 txt 文件，于是右击鼠标 –&gt; 重命名 –&gt; 把 “ .txt “ 改为 “ .bat “"></a>关闭这个 txt 文件，于是右击鼠标 –&gt; 重命名 –&gt; 把 “ .txt “ 改为 “ .bat “</h3><h3 id="于是双击即可"><a href="#于是双击即可" class="headerlink" title="于是双击即可"></a>于是双击即可</h3>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信多开</title>
      <link href="/msj_blog.io/2020/09/09/%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80/"/>
      <url>/msj_blog.io/2020/09/09/%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\msj_blog.io\assets\css\APlayer.min.css"><script src="\msj_blog.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信多开"><a href="#微信多开" class="headerlink" title="微信多开"></a>微信多开</h1><h3 id="在电脑中-新建一个-txt-文件，把下面的代码-复制粘贴-到刚刚-新建的-txt-文件中-任何一个位置都可以新建-txt-文件"><a href="#在电脑中-新建一个-txt-文件，把下面的代码-复制粘贴-到刚刚-新建的-txt-文件中-任何一个位置都可以新建-txt-文件" class="headerlink" title="在电脑中 新建一个 txt 文件，把下面的代码 复制粘贴 到刚刚 新建的 txt 文件中 ,  ( 任何一个位置都可以新建 txt 文件 )"></a>在电脑中 新建一个 txt 文件，把下面的代码 复制粘贴 到刚刚 新建的 txt 文件中 ,  ( 任何一个位置都可以新建 txt 文件 )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TASKKILL /F /IM wechat.exe</span><br><span class="line"><span class="keyword">start</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span></span><br><span class="line"><span class="keyword">start</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span></span><br></pre></td></tr></table></figure><h3 id="关闭这个-txt-文件，于是右击鼠标-–-gt-重命名-–-gt-把-“-txt-“-改为-“-bat-“"><a href="#关闭这个-txt-文件，于是右击鼠标-–-gt-重命名-–-gt-把-“-txt-“-改为-“-bat-“" class="headerlink" title="关闭这个 txt 文件，于是右击鼠标 –&gt; 重命名 –&gt; 把 “ .txt “ 改为 “ .bat “"></a>关闭这个 txt 文件，于是右击鼠标 –&gt; 重命名 –&gt; 把 “ .txt “ 改为 “ .bat “</h3><h3 id="于是双击即可"><a href="#于是双击即可" class="headerlink" title="于是双击即可"></a>于是双击即可</h3>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
